trigger = list(
"include_hidden_metabolites",
bsicons::bs_icon("info-circle")
),
"whether to include hidden metabolites. Default is 'FALSE'"
),choices = c("TRUE","FALSE"),value = "FALSE"
)
),
actionButton(inputId = ns('fpa_start'),label = "Perform FPA",icon = icon("play"))
),
page_fluid(
navset_card_tab(
height = 400,
full_screen = T,
title = "Dysregulated metabolic network",
sidebar = accordion(
open = FALSE,
accordion_panel(
title = 'Parameters',
radioButtons(
inputId = ns('fig2_include_feature'), label = tooltip(
trigger = list(
"include_feature",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to include detected metabolic features in the plot. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig2_include_hidden_metabolites'), label = tooltip(
trigger = list(
"include_hidden_metabolites",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to include hidden metabolites in the plot. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig2_add_compound_name'), label = tooltip(
trigger = list(
"add_compound_name",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to add compound names as labels in the visualization. Default is 'TRUE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig2_node_color_by_module'), label = tooltip(
trigger = list(
"node_color_by_module",
bsicons::bs_icon("info-circle")
),
"Add pathways beside of the network or not. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
textInput(
inputId = ns('fig2_layout'),label = tooltip(
trigger = list(
"layout",
bsicons::bs_icon("info-circle")
),
"The layout of the network, such as 'kk' or 'fr'."
),value = "fr"
),
actionButton(inputId = ns("show_network_plot"),label = "Show network")
),
accordion_panel(
title = 'Download',
icon = bs_icon('download'),
textInput(
inputId = ns("fig2_height"),label = "Height",value = 7
),
textInput(
inputId = ns("fig2_width"),label = "width",value = 7
),
selectInput(
inputId = ns("fig2_format"),label = "format",
choices = c("jpg","pdf","png","tiff"),
selected = "pdf",selectize = F
),
downloadButton(outputId = ns("fig2_download"),label = "Download",icon = icon("download"))
)
),
nav_panel("Dysregulated metabolic network",
dataTableOutput(ns("network_tbl")),
plotOutput(ns("network_plt"))
)
),
navset_card_tab(
height = 400,
full_screen = T,
title = "Module network",
sidebar = accordion(
open = FALSE,
accordion_panel(
title = 'Parameters',
radioButtons(
inputId = ns('fig1_include_feature'), label = tooltip(
trigger = list(
"include_feature",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to include detected metabolic features in the plot. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig1_include_hidden_metabolites'), label = tooltip(
trigger = list(
"include_hidden_metabolites",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to include hidden metabolites in the plot. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig1_add_compound_name'), label = tooltip(
trigger = list(
"add_compound_name",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to add compound names as labels in the visualization. Default is 'TRUE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig1_add_pathways'), label = tooltip(
trigger = list(
"add_pathways",
bsicons::bs_icon("info-circle")
),
"Add pathways beside of the network or not. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
textInput(
inputId = ns('fig1_layout'),label = tooltip(
trigger = list(
"layout",
bsicons::bs_icon("info-circle")
),
"The layout of the network, such as 'kk' or 'fr'."
),value = "fr"
)
),
accordion_panel(
title = 'Download',
icon = bs_icon('download'),
textInput(
inputId = ns("fig1_height"),label = "Height",value = 7
),
textInput(
inputId = ns("fig1_width"),label = "width",value = 7
),
selectInput(
inputId = ns("fig1_format"),label = "format",
choices = c("jpg","pdf","png","tiff"),
selected = "pdf",selectize = F
),
downloadButton(outputId = ns("fig1_download"),label = "Download",icon = icon("download"))
)
),
nav_panel("Module network",
actionButton(inputId = ns("show_module_plot"),label = "Show module network"),
dataTableOutput(ns("module_tbl")),
plotOutput(ns("module_plt"))
)
)
)
)
)
}
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
devtools::document()
devtools::document()
run_tidymass_shiny()
load("~/temp_file/fpa/fpa_result.rda")
fpa_result <- load("~/temp_file/fpa/fpa_result.rda")
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
library(tidymass)
library(tidymass)
library(tidyverse)
library(tidymassshiny)
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
?tidymassshiny::paramounter_part1
??tidymassshiny::paramounter_part1
library(tidymassshiny)
devtools::document()
run_tidymass_shiny()
library(tidyverse)
library(tidymass)
run_tidymass_shiny()
library(tidyverse)
library(tidymass)
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
library(tidyverse)
library(tidymass)
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
library(tidyverse)
library(tidymass)
library(tidymassshiny)
run_tidymass_shiny()
devtools::document()
check_mass_dataset_class
library(tidymass)
library(tidyverse)
object
load("/Volumes/HubDisk/SynologyDrive/demo_data/01.From_Raw_data/mass_dataset/object_neg_raw.rda")
massdataset::check_mass_dataset_class(object = object_neg_raw)
if(!massdataset::check_mass_dataset_class(object = object_neg_raw)) {return()}
if(!massdataset::check_mass_dataset_class(object = object_neg_raw)) {return();print("wrong input object")}
if(!massdataset::check_mass_dataset_class(object = dadf)) {return();print("wrong input object")}
dadf = "c"
if(!massdataset::check_mass_dataset_class(object = dadf)) {return();print("wrong input object")}
if(!massdataset::check_mass_dataset_class(object = dadf))
if(!massdataset::check_mass_dataset_class(object = dadf)) {return();print("wrong input object")}
check_mass_dataset_class(dadf)
check_mass_dataset_class
class(object_neg_raw)
if(class(object_neg_raw) != "mass_dataset") {return();print("wrong input object")}
object = c(1,2,3)
if(class(object) != "mass_dataset") {return();print("wrong input object")}
if(class(object) != "mass_dataset") {return(NULL);print("wrong input object")}
if(class(object) != "mass_dataset") {break;print("wrong input object")}
if(class(object) != "mass_dataset") {exit;print("wrong input object")}
if (!inherits(object, "mass_dataset")) {
stop("Input object must be a 'mass_dataset' class object.\n",
"Please check the class of your input with class(object).")
return(invisible())  # 双重保障确保终止
}
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
library(tidymass)
devtools::document()
library(tidymass)
library(tidyverse)
library(MDAtoolkits)
run_tidymass_shiny()
?annotate
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank())
}
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank()) %>% ggplotly()
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank()) %>% plotly::ggplotly()
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank()) %>% ggplotly()
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank()) %>% plotly::ggplotly()
p =             ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank())
p %>% plotly::ggplotly()
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
load("/Volumes/Samsung_T5/ZH/mass_dataset/03.object_pos_outlier.rda")
object = object_pos_outlier
object
mode = "positive"
show_processing = TRUE
show_qc = TRUE
color = TRUE
# check parameters
if (missing(object)) stop("No mass_dataset object provided")
if (!inherits(object, "mass_dataset")) {
stop("Input must be a mass_dataset S4 object")
}
mode <- match.arg(mode)
# colors
col_title <- if (color) "\033[1m\033[34m" else ""
col_reset <- if (color) "\033[0m" else ""
col_green <- if (color) "\033[32m" else ""
col_yellow <- if (color) "\033[33m" else ""
# process init
output <- character(0)
# title
output <- c(output,
sprintf("%s── massdataset Object Summary (%s Mode) ──%s",
col_title, str_to_title(mode), col_reset),
""
)
# core metadata -------------------------------------------------------------
output <- c(output,
sprintf("%sCore Components:%s", col_title, col_reset),
sprintf("├─ Expression Data: %s × %s variables",
format(nrow(object@expression_data), big.mark = ","),
format(ncol(object@expression_data), big.mark = ",")),
sprintf("├─ Sample Info: %s samples × %s metadata",
format(nrow(object@sample_info), big.mark = ","),
ncol(object@sample_info)),
sprintf("├─ Variable Info: %s features × %s annotations",
format(nrow(object@variable_info), big.mark = ","),
ncol(object@variable_info)),
sprintf("└─ MS2 Spectra: %s",
ifelse(length(object@ms2_data) > 0,
sprintf("%s spectra", format(length(object@ms2_data), big.mark = ",")),
"Not available")),
""
)
# Processing historical analysis -----------------------------------------------------------
if (show_processing && length(object@process_info) > 0) {
proc_list <- object@process_info
output <- c(output,
sprintf("%sProcessing History:%s", col_title, col_reset),
sprintf("├─ Total steps: %d", length(proc_list)))
# summary steps
step_names <- names(proc_list)
unique_steps <- unique(step_names)
freq_table <- table(step_names)
# summary step frequencies
output <- c(output, "├─ Step frequencies:")
for (step in unique_steps) {
output <- c(output,
sprintf("│  ├─ %s (×%d)", step, freq_table[[step]])
)
}
# print details
last_step <- proc_list[[length(proc_list)]]
output <- c(output,
"└─ Last operation details:",
sprintf("   ├─ Step name: %s", names(proc_list)[length(proc_list)]),
sprintf("   ├─ Function: %s::%s",
last_step@pacakge_name,
last_step@function_name),
sprintf("   ├─ Time: %s",
format(as.POSIXct(last_step@time), "%Y-%m-%d %H:%M:%OS3")),
"   └─ Parameters:"
)
# data format
if (length(last_step@parameter) > 0) {
params <- last_step@parameter
max_len <- max(nchar(names(params)))
for (i in seq_along(params)) {
param_name <- sprintf(paste0("%-", max_len, "s"), names(params)[i])
param_value <- if (length(params[[i]]) > 50) {
paste0(substr(params[[i]], 1, 47), "...")
} else {
params[[i]]
}
output <- c(output,
sprintf("      %s : %s", param_name, param_value)
)
}
} else {
output <- c(output, "      No parameters recorded")
}
output <- c(output, "")
}
object@process_info
proc_list <- object@process_info
output
output <- c(output,
sprintf("%sProcessing History:%s", col_title, col_reset),
sprintf("├─ Total steps: %d", length(proc_list)))
output
# summary steps
step_names <- names(proc_list)
unique_steps <- unique(step_names)
freq_table <- table(step_names)
# summary step frequencies
output <- c(output, "├─ Step frequencies:")
for (step in unique_steps) {
output <- c(output,
sprintf("│  ├─ %s (×%d)", step, freq_table[[step]])
)
}
output
# print details
last_step <- proc_list[[length(proc_list)]]
last_step
length(proc_list)
proc_list
last_step
length(last_step) > 0
if(length(last_step) > 0) {
last_step = last_step[[length(last_step)]]
}
last_step
output <- c(output,
"└─ Last operation details:",
sprintf("   ├─ Step name: %s", names(proc_list)[length(proc_list)]),
sprintf("   ├─ Function: %s::%s",
last_step@pacakge_name,
last_step@function_name),
sprintf("   ├─ Time: %s",
format(as.POSIXct(last_step@time), "%Y-%m-%d %H:%M:%OS3")),
"   └─ Parameters:"
)
output
# data format
if (length(last_step@parameter) > 0) {
params <- last_step@parameter
max_len <- max(nchar(names(params)))
for (i in seq_along(params)) {
param_name <- sprintf(paste0("%-", max_len, "s"), names(params)[i])
param_value <- if (length(params[[i]]) > 50) {
paste0(substr(params[[i]], 1, 47), "...")
} else {
params[[i]]
}
output <- c(output,
sprintf("      %s : %s", param_name, param_value)
)
}
} else {
output <- c(output, "      No parameters recorded")
}
output <- c(output, "")
output
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
x = 0
paste0(x,collapse = " | ")
x = c(1,2)
paste0(x,collapse = " | ")
run_tidymass_shiny()
