order_by = para$fig3_order_by,
percentage = para$fig3_percentage,
show_x_text = para$fig3_show_x_text,
show_x_ticks = para$fig3_show_x_ticks,
desc = para$fig3_desc
)
p2 <- p2_dataclean$object_neg %>% massqc::show_sample_missing_values(
color_by = para$fig3_color_by,
order_by = para$fig3_order_by,
percentage = para$fig3_percentage,
show_x_text = para$fig3_show_x_text,
show_x_ticks = para$fig3_show_x_ticks,
desc = para$fig3_desc
)
p <- (p1 + ggtitle("Positive")) + (p2 + ggtitle("Negative"))
} else if (!is.null(p2_dataclean$object_pos)) {
p <- p2_dataclean$object_pos %>% massqc::show_sample_missing_values(
color_by = para$fig3_color_by,
order_by = para$fig3_order_by,
percentage = para$fig3_percentage,
show_x_text = para$fig3_show_x_text,
show_x_ticks = para$fig3_show_x_ticks,
desc = para$fig3_desc
)
} else {
p <- p2_dataclean$object_neg %>% massqc::show_sample_missing_values(
color_by = para$fig3_color_by,
order_by = para$fig3_order_by,
percentage = para$fig3_percentage,
show_x_text = para$fig3_show_x_text,
show_x_ticks = para$fig3_show_x_ticks,
desc = para$fig3_desc
)
}
# save plot
ggsave(
filename = file,
plot = p,
width = para_d$fig3_width,
height = para_d$fig3_height,
device = para_d$fig3_format
)
}
)
###> fig4 =======
output$fig4_download = downloadHandler(
filename = function() {
paste0("04.Variable_missing_value.", download_para()$fig4_format)
},
content = function(file) {
# extract parameters
para <- plot4_para()
para_d <- download_para()
# draw condition
if (!is.null(p2_dataclean$object_pos) & !is.null(p2_dataclean$object_neg)) {
para_d$fig4_width = para_d$fig4_width * 2
p1 <- p2_dataclean$object_pos %>% massqc::show_variable_missing_values(
color_by = para$fig4_color_by,
order_by = para$fig4_order_by,
percentage = para$fig4_percentage,
show_x_text = para$fig4_show_x_text,
show_x_ticks = para$fig4_show_x_ticks,
desc = para$fig4_desc
)
p2 <- p2_dataclean$object_neg %>% massqc::show_variable_missing_values(
color_by = para$fig4_color_by,
order_by = para$fig4_order_by,
percentage = para$fig4_percentage,
show_x_text = para$fig4_show_x_text,
show_x_ticks = para$fig4_show_x_ticks,
desc = para$fig4_desc
)
p <- (p1 + ggtitle("Positive")) + (p2 + ggtitle("Negative"))
} else if (!is.null(p2_dataclean$object_pos)) {
p <- p2_dataclean$object_pos %>% massqc::show_variable_missing_values(
color_by = para$fig4_color_by,
order_by = para$fig4_order_by,
percentage = para$fig4_percentage,
show_x_text = para$fig4_show_x_text,
show_x_ticks = para$fig4_show_x_ticks,
desc = para$fig4_desc
)
} else {
p <- p2_dataclean$object_neg %>% massqc::show_variable_missing_values(
color_by = para$fig4_color_by,
order_by = para$fig4_order_by,
percentage = para$fig4_percentage,
show_x_text = para$fig4_show_x_text,
show_x_ticks = para$fig4_show_x_ticks,
desc = para$fig4_desc
)
}
# save plot
ggsave(
filename = file,
plot = p,
width = para_d$fig4_width,
height = para_d$fig4_height,
device = para_d$fig4_format
)
}
)
###> fig5 ==============
output$fig5_download = downloadHandler(
filename = function() {
paste0("05.rsd_plot.", download_para()$fig5_format)
},
content = function(file) {
# extract parameters
para <- plot5_para()
para_d <- download_para()
# draw condition
if (!is.null(p2_dataclean$object_pos) & !is.null(p2_dataclean$object_neg)) {
para_d$fig5_width = para_d$fig5_width * 2
p1 <- p2_dataclean$object_pos %>%
dplyr::filter(class == "QC")%>%
massqc::massqc_cumulative_rsd_plot(
rsd_cutoff = para$fig5_rsd_cutoff,
color = para$fig5_color,
title = 'All of QC sample'
)
p2 <- p2_dataclean$object_neg %>%
dplyr::filter(class == "QC")%>%
massqc::massqc_cumulative_rsd_plot(
rsd_cutoff = para$fig5_rsd_cutoff,
color = para$fig5_color,
title = 'All of QC sample'
)
p <- (p1 + ggtitle("Positive")) + (p2 + ggtitle("Negative"))
} else if (!is.null(p2_dataclean$object_pos)) {
p <- p2_dataclean$object_pos %>%
dplyr::filter(class == "QC")%>%
massqc::massqc_cumulative_rsd_plot(
rsd_cutoff = para$fig5_rsd_cutoff,
color = para$fig5_color,
title = 'All of QC sample'
)
} else {
p <- p2_dataclean$object_neg %>%
dplyr::filter(class == "QC")%>%
massqc::massqc_cumulative_rsd_plot(
rsd_cutoff = para$fig5_rsd_cutoff,
color = para$fig5_color,
title = 'All of QC sample'
)
}
# save plot
ggsave(
filename = file,
plot = p,
width = para_d$fig5_width,
height = para_d$fig5_height,
device = para_d$fig5_format
)
}
)
###> fig6 ==============
output$fig6_download = downloadHandler(
filename = function() {
paste0("06.rsd_plot.", download_para()$fig6_format)
},
content = function(file) {
# extract parameters
para <- plot6_para()
para_d <- download_para()
# draw condition
if (!is.null(p2_dataclean$object_pos) & !is.null(p2_dataclean$object_neg)) {
para_d$fig6_width = para_d$fig6_width * 2
p1 <- p2_dataclean$object_pos %>%log() %>%
dplyr::filter(class == "QC")%>%
massqc::massqc_sample_boxplot(
color_by = para$fig6_color_by,
fill_by = para$fig6_fill_by,
order_by = para$fig6_order_by,
point = para$fig6_point,
point_alpha = para$fig6_alpha
)
p2 <- p2_dataclean$object_neg %>%log() %>%
dplyr::filter(class == "QC")%>%
massqc::massqc_sample_boxplot(
color_by = para$fig6_color_by,
fill_by = para$fig6_fill_by,
order_by = para$fig6_order_by,
point = para$fig6_point,
point_alpha = para$fig6_alpha
)
p <- (p1 + ggtitle("Positive")) + (p2 + ggtitle("Negative"))
} else if (!is.null(p2_dataclean$object_pos)) {
p <- p2_dataclean$object_pos %>%log() %>%
dplyr::filter(class == "QC")%>%
massqc::massqc_sample_boxplot(
color_by = para$fig6_color_by,
fill_by = para$fig6_fill_by,
order_by = para$fig6_order_by,
point = para$fig6_point,
point_alpha = para$fig6_alpha
)
} else {
p <- p2_dataclean$object_neg %>%log() %>%
dplyr::filter(class == "QC")%>%
massqc::massqc_sample_boxplot(
color_by = para$fig6_color_by,
fill_by = para$fig6_fill_by,
order_by = para$fig6_order_by,
point = para$fig6_point,
point_alpha = para$fig6_alpha
)
}
# save plot
ggsave(
filename = file,
plot = p,
width = para_d$fig6_width,
height = para_d$fig6_height,
device = para_d$fig6_format
)
}
)
###>
###>
###> fig7 ==============
output$fig7_download = downloadHandler(
filename = function() {
paste0("07.pca_plot.", download_para()$fig6_format)
},
content = function(file) {
# extract parameters
para <- plot7_para()
para_d <- download_para()
# draw condition
if (!is.null(p2_dataclean$object_pos) & !is.null(p2_dataclean$object_neg)) {
para_d$fig7_width = para_d$fig7_width * 2
p1 <- p2_dataclean$object_pos %>% +1 %>% log(2) %>%
massqc::massqc_pca(
color_by = para$fig7_color_by,
point_alpha = para$fig7_point_alpha,
frame = para$fig7_frame,
line = para$fig7_line
)
p2 <- p2_dataclean$object_neg %>% +1 %>% log(2) %>%
massqc::massqc_pca(
color_by = para$fig7_color_by,
point_alpha = para$fig7_point_alpha,
frame = para$fig7_frame,
line = para$fig7_line
)
p <- (p1 + ggtitle("Positive")) + (p2 + ggtitle("Negative"))
} else if (!is.null(p2_dataclean$object_pos)) {
p <- p2_dataclean$object_pos %>% +1 %>% log(2) %>%
massqc::massqc_pca(
color_by = para$fig7_color_by,
point_alpha = para$fig7_point_alpha,
frame = para$fig7_frame,
line = para$fig7_line
)
} else {
p <- p2_dataclean$object_neg %>% +1 %>% log(2) %>%
massqc::massqc_pca(
color_by = para$fig7_color_by,
point_alpha = para$fig7_point_alpha,
frame = para$fig7_frame,
line = para$fig7_line
)
}
# save plot
ggsave(
filename = file,
plot = p,
width = para_d$fig7_width,
height = para_d$fig7_height,
device = para_d$fig7_format
)
}
)
}
)
}
devtools::document()
library(tidymassshiny)
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
library(tidymassshiny)
devtools::document()
devtools::document()
library(tidymassshiny)
library(tidymassshiny)
run_tidymass_shiny()
devtools::document()
library(tidymassshiny)
run_tidymass_shiny()
load("/Volumes/TerraMas_A/SynologyDrive/5_测试代码/00.DemoHeter/Result/POS/Objects/step1/object_pos_raw.rda")
massqc_pca_3d(object = object_pos_raw,color_by = 'class',x_axis = 'PC1',y_axis = 'PC2',z_axis = 'PC3')
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2),color_by = 'class',x_axis = 'PC1',y_axis = 'PC2',z_axis = 'PC3')
library(tidyverse)
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2),color_by = 'class',x_axis = 'PC1',y_axis = 'PC2',z_axis = 'PC3')
object = object_pos_raw %>% +1 %>% log(2)
color_by = 'class'
x_axis = 'PC1'
y_axis = 'PC2'
z_axis = 'PC3'
if(!is(object = object, class2 = "mass_dataset")){
stop("obejct should be mass_dataset class.\n")
}
if (sum(is.na(object@expression_data)) > 0) {
warning("MVs in you object,
\nwill remove variables > 50% and imputate with zero.\n")
object <-
object %>%
massdataset::mutate_variable_na_freq()
object <-
object %>%
massdataset::activate_mass_dataset(what = "variable_info") %>%
dplyr::filter(na_freq < 0.5)
}
sample_info <- object@sample_info
expression_data <- object@expression_data
expression_data <-
expression_data %>%
apply(1, function(x) {
x[is.na(x)] = min(x[!is.na(x)])
x
}) %>%
t()
if (missing(color_by)) {
color_by <- "no"
} else{
if (all(colnames(object@sample_info) != color_by)) {
stop("no ", color_by, " in sample_info, please check.\n")
}
}
if (all(names(object@process_info) != "scale")) {
warning("no scale for this dataset, try to scale() before pca.\n")
}
pca_object <- prcomp(x = t(as.matrix(expression_data)),center = FALSE,scale. = FALSE)
temp_variances <- pca_object$sdev^2
temp_explained_variance <- (temp_variances / sum(temp_variances) * 100) %>% setNames(paste0("PC",1:length(.)))
pca_rotation = pca_object$x %>% as.data.frame()
if(nrow(pca_rotation) < 3) {
stop('not enough dimensions for 3D PCA plot')
}
temp_x = pca_rotation %>% pull(x)
temp_y = pca_rotation %>% pull(y)
temp_z = pca_rotation %>% pull(z)
x
temp_x = pca_rotation %>% pull(x_axis)
temp_y = pca_rotation %>% pull(y_axis)
temp_z = pca_rotation %>% pull(z_axis)
temp_x_title = paste0(x_axis,"(",temp_explained_variance[names(temp_explained_variance) == x] %>% as.numeric() %>% round(.,2),"%)")
temp_y_title = paste0(y_axis,"(",temp_explained_variance[names(temp_explained_variance) == y] %>% as.numeric() %>% round(.,2),"%)")
temp_x_title = paste0(x_axis,"(",temp_explained_variance[names(temp_explained_variance) == x_axis] %>% as.numeric() %>% round(.,2),"%)")
temp_y_title = paste0(y_axis,"(",temp_explained_variance[names(temp_explained_variance) == y_axis] %>% as.numeric() %>% round(.,2),"%)")
temp_z_title = paste0(z_axis,"(",temp_explained_variance[names(temp_explained_variance) == z_axis] %>% as.numeric() %>% round(.,2),"%)")
temp_color = sample_info %>% pull(color_by)
plot = plot_ly() %>%
add_trace(
x = temp_x,y = temp_y,z = temp_z,
type = 'scatter3d',mode = 'markers',color = temp_color,hovertext = sample_info$sample_id
) %>%
layout(
title = list(text = "3D PCA"),
legend = list(title = list(text = color_by)),
scene = list(
xaxis = list(title = temp_x_title),
yaxis = list(title = temp_y_title),
zaxis = list(title = temp_z_title)
)
)
plot
plot_ly() %>%
add_trace(
x = temp_x,y = temp_y,z = temp_z,
type = 'scatter3d',mode = 'markers',color = temp_color,hovertext = sample_info$sample_id
)
library(plotly)
plot_ly() %>%
add_trace(
x = temp_x,y = temp_y,z = temp_z,
type = 'scatter3d',mode = 'markers',color = temp_color,hovertext = sample_info$sample_id
)
plot_ly() %>%
add_trace(
x = temp_x,y = temp_y,z = temp_z,
type = 'scatter3d',mode = 'markers',color = temp_color,hovertext = sample_info$sample_id
) %>%
layout(
title = list(text = "3D PCA"),
legend = list(title = list(text = color_by)),
scene = list(
xaxis = list(title = temp_x_title),
yaxis = list(title = temp_y_title),
zaxis = list(title = temp_z_title)
)
)
devtools::document()
library(tidymassshiny)
devtools::document()
library(tidymassshiny)
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2),color_by = 'group')
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2),color_by = 'tissue')
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2) %>% scale(),color_by = 'tissue')
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2),color_by = 'tissue')
object %>% scale()
object %>% scale() %>% +1 %>% log(2)
object %>% scale() %>% +1 %>% log(2) %>% massqc_pca_3d(color_by = 'class')
object %>% scale() %>% +1 %>% log(2) %>% massqc_pca_3d(color_by = 'tissue')
object %>% +1 %>% log(2) %>% scale() %>% massqc_pca_3d(color_by = 'tissue')
devtools::document()
library(tidymassshiny)
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
library(tidymassshiny)
library(tidymass)
library(tidyverse)
library(tidymassshiny)
run_tidymass_shiny()
load("/Volumes/TerraMas_A/SynologyDrive/5_测试代码/00.DemoHeter/Result/POS/Objects/step1/object_pos_raw.rda")
sample_info <- object@sample_info
sample_info
sample_info <- object_pos_raw@sample_info
sample_info
sample_info %>%
dplyr::mutate(
hover_text = paste(
"sample_id:",sample_info[,1],
"<br>class", sample_info[,3],
"<br>group", sample_info[,4]
)
)
sample_info %>%
dplyr::mutate(
hover_text = paste(
"sample_id:",sample_info[,1],
"<br>class:",sample_info[,3],
"<br>group:",sample_info[,4]
)
) %>%
rowwise() %>%
mutate(customdata = paste(across(!hover_text, ~ as.character(.x)), collapse = "|"))
sample_info
sample_info <- object_pos_raw@sample_info
sample_info <- sample_info %>%
mutate(hover_text = map_chr(1:n(), function(i) {
paste(map_chr(colnames(sample_info), function(col) {
paste(col, ":", sample_info[i, col], sep = "")
}), collapse = "<br>")
}))
sample_info
devtools::document()
library(tidymassshiny)
load("/Volumes/TerraMas_A/SynologyDrive/5_测试代码/00.DemoHeter/Result/POS/Objects/step1/object_pos_raw.rda")
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2),color_by = 'class',x_axis = 'PC1',y_axis = 'PC2',z_axis = 'PC3')
massqc_pca_3d
devtools::document()
library(tidymassshiny)
load("/Volumes/TerraMas_A/SynologyDrive/5_测试代码/00.DemoHeter/Result/POS/Objects/step1/object_pos_raw.rda")
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2),color_by = 'class',x_axis = 'PC1',y_axis = 'PC2',z_axis = 'PC3')
library(tidyverse)
library(tidymass)
library(tidymassshiny)
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2),color_by = 'class',x_axis = 'PC1',y_axis = 'PC2',z_axis = 'PC3')
object_pos_raw@sample_info
object = object_pos_raw %>% +1 %>% log(2)
object@sample_info
color_by = 'tissue'
x_axis = "PC1",
x_axis = "PC1"
y_axis = "PC2"
z_axis = "PC3"
if(!is(object = object, class2 = "mass_dataset")){
stop("obejct should be mass_dataset class.\n")
}
if (sum(is.na(object@expression_data)) > 0) {
warning("MVs in you object,
\nwill remove variables > 50% and imputate with zero.\n")
object <-
object %>%
massdataset::mutate_variable_na_freq()
object <-
object %>%
massdataset::activate_mass_dataset(what = "variable_info") %>%
dplyr::filter(na_freq < 0.5)
}
sample_info <- object@sample_info %>%
mutate(hover_text = map_chr(1:n(), function(i) {
paste(map_chr(colnames(sample_info), function(col) {
paste(col, ":", sample_info[i, col], sep = "")
}), collapse = "<br>")
}))
sample_info
object@sample_info
sample_info <- sample_info %>%
mutate(hover_text = map_chr(1:n(), function(i) {
paste(map_chr(colnames(sample_info), function(col) {
paste(col, ":", sample_info[i, col], sep = "")
}), collapse = "<br>")
}))
sample_info
devtools::document()
run_tidymass_shiny()
library(tidymassshiny)
library(tidyverse)
library(tidymass)
library(tidymassshiny)
load("/Volumes/TerraMas_A/SynologyDrive/5_测试代码/00.DemoHeter/Result/POS/Objects/step1/object_pos_raw.rda")
massqc_pca_3d(object = object_pos_raw %>% +1 %>% log(2),color_by = 'tissue',x_axis = 'PC1',y_axis = 'PC2',z_axis = 'PC3')
run_tidymass_shiny()
massqc_sample_correlation
library(colorpicker)
library(colourpicker)
run_tidymass_shiny()
