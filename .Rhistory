"Please check the class of your input with class(object).")
return(invisible())  # 双重保障确保终止
}
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
library(tidymass)
devtools::document()
library(tidymass)
library(tidyverse)
library(MDAtoolkits)
run_tidymass_shiny()
?annotate
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank())
}
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank()) %>% ggplotly()
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank()) %>% plotly::ggplotly()
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank()) %>% ggplotly()
ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank()) %>% plotly::ggplotly()
p =             ggplot() +
annotate("text", x = 0.5, y = 0.5,
label = "Using previously optimized parameters",
size = 12, color = "#7f8c8d") +
theme_void() +
theme(plot.background = element_rect(fill = "#f5f6fa", color = NA),
panel.border = element_blank())
p %>% plotly::ggplotly()
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
load("/Volumes/Samsung_T5/ZH/mass_dataset/03.object_pos_outlier.rda")
object = object_pos_outlier
object
mode = "positive"
show_processing = TRUE
show_qc = TRUE
color = TRUE
# check parameters
if (missing(object)) stop("No mass_dataset object provided")
if (!inherits(object, "mass_dataset")) {
stop("Input must be a mass_dataset S4 object")
}
mode <- match.arg(mode)
# colors
col_title <- if (color) "\033[1m\033[34m" else ""
col_reset <- if (color) "\033[0m" else ""
col_green <- if (color) "\033[32m" else ""
col_yellow <- if (color) "\033[33m" else ""
# process init
output <- character(0)
# title
output <- c(output,
sprintf("%s── massdataset Object Summary (%s Mode) ──%s",
col_title, str_to_title(mode), col_reset),
""
)
# core metadata -------------------------------------------------------------
output <- c(output,
sprintf("%sCore Components:%s", col_title, col_reset),
sprintf("├─ Expression Data: %s × %s variables",
format(nrow(object@expression_data), big.mark = ","),
format(ncol(object@expression_data), big.mark = ",")),
sprintf("├─ Sample Info: %s samples × %s metadata",
format(nrow(object@sample_info), big.mark = ","),
ncol(object@sample_info)),
sprintf("├─ Variable Info: %s features × %s annotations",
format(nrow(object@variable_info), big.mark = ","),
ncol(object@variable_info)),
sprintf("└─ MS2 Spectra: %s",
ifelse(length(object@ms2_data) > 0,
sprintf("%s spectra", format(length(object@ms2_data), big.mark = ",")),
"Not available")),
""
)
# Processing historical analysis -----------------------------------------------------------
if (show_processing && length(object@process_info) > 0) {
proc_list <- object@process_info
output <- c(output,
sprintf("%sProcessing History:%s", col_title, col_reset),
sprintf("├─ Total steps: %d", length(proc_list)))
# summary steps
step_names <- names(proc_list)
unique_steps <- unique(step_names)
freq_table <- table(step_names)
# summary step frequencies
output <- c(output, "├─ Step frequencies:")
for (step in unique_steps) {
output <- c(output,
sprintf("│  ├─ %s (×%d)", step, freq_table[[step]])
)
}
# print details
last_step <- proc_list[[length(proc_list)]]
output <- c(output,
"└─ Last operation details:",
sprintf("   ├─ Step name: %s", names(proc_list)[length(proc_list)]),
sprintf("   ├─ Function: %s::%s",
last_step@pacakge_name,
last_step@function_name),
sprintf("   ├─ Time: %s",
format(as.POSIXct(last_step@time), "%Y-%m-%d %H:%M:%OS3")),
"   └─ Parameters:"
)
# data format
if (length(last_step@parameter) > 0) {
params <- last_step@parameter
max_len <- max(nchar(names(params)))
for (i in seq_along(params)) {
param_name <- sprintf(paste0("%-", max_len, "s"), names(params)[i])
param_value <- if (length(params[[i]]) > 50) {
paste0(substr(params[[i]], 1, 47), "...")
} else {
params[[i]]
}
output <- c(output,
sprintf("      %s : %s", param_name, param_value)
)
}
} else {
output <- c(output, "      No parameters recorded")
}
output <- c(output, "")
}
object@process_info
proc_list <- object@process_info
output
output <- c(output,
sprintf("%sProcessing History:%s", col_title, col_reset),
sprintf("├─ Total steps: %d", length(proc_list)))
output
# summary steps
step_names <- names(proc_list)
unique_steps <- unique(step_names)
freq_table <- table(step_names)
# summary step frequencies
output <- c(output, "├─ Step frequencies:")
for (step in unique_steps) {
output <- c(output,
sprintf("│  ├─ %s (×%d)", step, freq_table[[step]])
)
}
output
# print details
last_step <- proc_list[[length(proc_list)]]
last_step
length(proc_list)
proc_list
last_step
length(last_step) > 0
if(length(last_step) > 0) {
last_step = last_step[[length(last_step)]]
}
last_step
output <- c(output,
"└─ Last operation details:",
sprintf("   ├─ Step name: %s", names(proc_list)[length(proc_list)]),
sprintf("   ├─ Function: %s::%s",
last_step@pacakge_name,
last_step@function_name),
sprintf("   ├─ Time: %s",
format(as.POSIXct(last_step@time), "%Y-%m-%d %H:%M:%OS3")),
"   └─ Parameters:"
)
output
# data format
if (length(last_step@parameter) > 0) {
params <- last_step@parameter
max_len <- max(nchar(names(params)))
for (i in seq_along(params)) {
param_name <- sprintf(paste0("%-", max_len, "s"), names(params)[i])
param_value <- if (length(params[[i]]) > 50) {
paste0(substr(params[[i]], 1, 47), "...")
} else {
params[[i]]
}
output <- c(output,
sprintf("      %s : %s", param_name, param_value)
)
}
} else {
output <- c(output, "      No parameters recorded")
}
output <- c(output, "")
output
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
x = 0
paste0(x,collapse = " | ")
x = c(1,2)
paste0(x,collapse = " | ")
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
mv_impute_ui <- function(id) {
ns <- NS(id)
nav_panel(
title = 'Missing value imputation',
icon = bs_icon("grid-fill"),
layout_sidebar(
sidebar = accordion(
accordion_panel(
title = "Methods",
icon = bsicons::bs_icon("gear"),
selectInput(
inputId = ns('impute_mv_method'),
label = "method ",multiple = F,
choices = c("knn", "rf", "mean", "median", "zero", "minimum", "bpca", "svdImpute",
"ppca"),
selected = 'knn'
)),
accordion_panel(
title = "For KNN",
icon = bsicons::bs_icon("gear"),
textInput(
inputId = ns('impute_mv_k'),
label = "k",
value = 10
),
sliderInput(
inputId = ns('impute_mv_rowmax'),
label = "rowmax",
min = 0,
max = 1,
value = 0.5,step = 0.05
),
sliderInput(
inputId = ns('impute_mv_colmax'),
label = "colmax",
min = 0,
max = 1,
value = 0.8,step = 0.05
),
textInput(
inputId = ns('impute_mv_maxp'),
label = "maxp",
value = 1500
),
textInput(
inputId = ns('impute_mv_rng.seed'),
label = "rng.seed",
value = 362436069
)
),
accordion_panel(
title = "For missForest (rf)",
icon = bsicons::bs_icon("gear"),
textInput(
inputId = ns('impute_mv_maxiter'),
label = "maxiter",
value = 10
),
textInput(
inputId = ns('impute_mv_ntree'),
label = "ntree",
value = 100
),
radioButtons(
inputId = ns('impute_mv_decreasing'),
label = "decreasing",choices = c("TRUE","FALSE"),
selected = "FALSE"
)
),
accordion_panel(
title = "For missForest (rf)",
icon = bsicons::bs_icon("gear"),
textInput(
inputId = ns('impute_mv_npcs'),
label = "nPcs",
value = 2
),
textInput(
inputId = ns('impute_mv_maxsteps'),
label = "maxSteps",
value = 100
),
textInput(
inputId = ns('impute_mv_threshold'),
label = "threshold",
value = 0.0001
)
),
actionButton(
inputId = ns("impute_start"),
label = "Start",icon = icon("play")
)
)),
page_fluid(
nav_panel(title = "Missing value imputation",
navset_card_tab(
title = "Expression data preview",
height = 400,
full_screen = TRUE,
nav_panel(
"Positive",
dataTableOutput(ns("impute_tbl_pos"))
),
nav_panel(
"Negative",
dataTableOutput(ns("impute_tbl_neg"))
)
),
navset_card_tab(
title = "Status",
height = 400,
full_screen = TRUE,
nav_panel(
"Positive",
verbatimTextOutput(ns("obj_impute.pos"))
),
nav_panel(
"Negative",
verbatimTextOutput(ns("obj_impute.neg"))
)
)
)
)
)
)
mv_impute_ui <- function(id) {
ns <- NS(id)
nav_panel(
title = 'Missing value imputation',
icon = bs_icon("grid-fill"),
layout_sidebar(
sidebar = accordion(
accordion_panel(
title = "Methods",
icon = bsicons::bs_icon("gear"),
selectInput(
inputId = ns('impute_mv_method'),
label = "method ",multiple = F,
choices = c("knn", "rf", "mean", "median", "zero", "minimum", "bpca", "svdImpute",
"ppca"),
selected = 'knn'
)),
accordion_panel(
title = "For KNN",
icon = bsicons::bs_icon("gear"),
textInput(
inputId = ns('impute_mv_k'),
label = "k",
value = 10
),
sliderInput(
inputId = ns('impute_mv_rowmax'),
label = "rowmax",
min = 0,
max = 1,
value = 0.5,step = 0.05
),
sliderInput(
inputId = ns('impute_mv_colmax'),
label = "colmax",
min = 0,
max = 1,
value = 0.8,step = 0.05
),
textInput(
inputId = ns('impute_mv_maxp'),
label = "maxp",
value = 1500
),
textInput(
inputId = ns('impute_mv_rng.seed'),
label = "rng.seed",
value = 362436069
)
),
accordion_panel(
title = "For missForest (rf)",
icon = bsicons::bs_icon("gear"),
textInput(
inputId = ns('impute_mv_maxiter'),
label = "maxiter",
value = 10
),
textInput(
inputId = ns('impute_mv_ntree'),
label = "ntree",
value = 100
),
radioButtons(
inputId = ns('impute_mv_decreasing'),
label = "decreasing",choices = c("TRUE","FALSE"),
selected = "FALSE"
)
),
accordion_panel(
title = "For missForest (rf)",
icon = bsicons::bs_icon("gear"),
textInput(
inputId = ns('impute_mv_npcs'),
label = "nPcs",
value = 2
),
textInput(
inputId = ns('impute_mv_maxsteps'),
label = "maxSteps",
value = 100
),
textInput(
inputId = ns('impute_mv_threshold'),
label = "threshold",
value = 0.0001
)
),
actionButton(
inputId = ns("impute_start"),
label = "Start",icon = icon("play")
)
),
page_fluid(
nav_panel(title = "Missing value imputation",
navset_card_tab(
title = "Expression data preview",
height = 400,
full_screen = TRUE,
nav_panel(
"Positive",
dataTableOutput(ns("impute_tbl_pos"))
),
nav_panel(
"Negative",
dataTableOutput(ns("impute_tbl_neg"))
)
),
navset_card_tab(
title = "Status",
height = 400,
full_screen = TRUE,
nav_panel(
"Positive",
verbatimTextOutput(ns("obj_impute.pos"))
),
nav_panel(
"Negative",
verbatimTextOutput(ns("obj_impute.neg"))
)
)
)
)
)
)
}
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
normalize_data
masscleaner::normalize_data
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
