}
if(modes$has_neg) {
##> addcut filtering
p2_af_filter$object_neg <-
p2_af_filter$object_neg %>%
activate_mass_dataset("annotation_table") %>%
mutate(filter_tag_addcut =
dplyr::case_when(
Level == 3 & str_detect(Adduct,re_form_reg(af_Adduct_neg)) ~ "retain",
Level == 1 | Level == 2 ~ "retain",
TRUE ~ "remove"
)
) %>%
dplyr::filter(filter_tag_addcut == "retain")
##> temp object
p2_af_filter$object_neg_temp.af <- p2_af_filter$object_neg
if(para$multi_anno == "keep top total score") {
p2_af_filter$object_neg_temp.af =
p2_af_filter$object_neg_temp.af %>%
activate_mass_dataset("annotation_table") %>%
dplyr::group_by(variable_id) %>%
dplyr::filter(Level == min(Level)) %>%
dplyr::filter(Total.score == max(Total.score))
} else if(para$multi_anno == "keep the first one") {
p2_af_filter$object_neg_temp.af =
p2_af_filter$object_neg_temp.af %>%
activate_mass_dataset("annotation_table") %>%
dplyr::group_by(variable_id) %>%
dplyr::filter(Level == min(Level)) %>%
dplyr::filter(Total.score == max(Total.score)) %>%
dplyr::mutate(order = 1:length(variable_id)) %>%
dplyr::filter(order == 1) %>% dplyr::select(-order)
}
##> Remove redundancy
if(para$redundancy == "keep the first one") {
p2_af_filter$object_neg_temp.af =
p2_af_filter$object_neg_temp.af %>%
activate_mass_dataset("annotation_table") %>%
mutate(Compound.name.fix = str_split(Compound.name,";",Inf,T)[,1] %>% stringr::str_to_lower()) %>%
group_by(Compound.name.fix) %>%
slice_head(n = 1)
}
##> for annotation table output
p2_af_filter$neg_clean_anno =
p2_af_filter$object_neg_temp.af %>%
extract_annotation_table()
p2_af_filter$neg_var_id =
p2_af_filter$neg_clean_anno %>%
filter(Level == 2) %>% pull(variable_id) %>% unique()
output$Annotation_filtering_neg = renderDataTable_formated(
actions = input$af_start,
condition1 = p2_af_filter$object_neg_temp.af,
condition2 = p2_af_filter$object_neg,
filename.a = "3.6.7.AnnoFiltering_neg",
tbl = p2_af_filter$neg_clean_anno
)
##> for mirror play
p2_af_filter$temp_af_neg_tbl = p2_af_filter$neg_clean_anno %>% dplyr::filter(Level < 3) %>%
select(variable_id,Compound.name,Lab.ID,Database)
output$MS2_neg_tbl = renderDataTable_formated(
actions = input$af_start,
filename.a = "3.6.7.AnnoFiltering_neg_ms2",
tbl = p2_af_filter$temp_af_neg_tbl
)
if(para$feature_remove == "Both") {
p2_af_filter$object_neg_af = filter_annotations_massdataset(object = p2_af_filter$object_neg,annotate_tbl = temp_anno.neg,method = 'both')
} else if(para$feature_remove == "Only features with MS2 spectra") {
p2_af_filter$object_neg_af = filter_annotations_massdataset(object = p2_af_filter$object_neg,method = 'only ms2')
} else if(para$feature_remove == "Only annotated features") {
p2_af_filter$object_neg_af = p2_af_filter$object_neg_temp.af
} else if(para$feature_remove == "Keep unknown features"){
p2_af_filter$object_neg_af = p2_af_filter$object_neg
}
data_clean_rv$object_neg_af = p2_af_filter$object_neg_af
object_neg_af <- p2_af_filter$object_neg_af
save(
object_neg_af,
file = file.path(prj_init$mass_dataset_dir, "08.object_neg_af.rda")
)
}
##> status
output$obj_af.pos = check_massdata_info(
object = data_clean_rv$object_pos_af ,
mode = "positive"
)
output$obj_af.neg = check_massdata_info(
object = data_clean_rv$object_neg_af ,
mode = "negative"
)
shinyalert(
"Success!",
"Annotation filtering finish",
type = "success"
)
}
)
observeEvent(input$af_show_mirror_plot.pos, {
tryCatch({
if (is.null(p2_af_filter$object_pos_temp.af)) {
return()
}
if (is.null(p2_af_filter$pos_clean_anno)) {
return()
}
# plot pos
show_mz = input$show_mz %>% as.logical()
show_detail = input$show_detail %>% as.logical()
# get index
af_pos_row_idx = input$MS2_pos_tbl_rows_selected
# extract info
af_pos_row = p2_af_filter$temp_af_pos_tbl[af_pos_row_idx, ]
print(af_pos_row)
p2_af_filter$pos_vari_id = af_pos_row[[1]]
p2_af_filter$pos_db_name = af_pos_row[[4]]
temp_idx.pos = match(p2_af_filter$pos_db_name, p2_af_filter$db.name)
temp_db.pos = p2_af_filter$dblist[[temp_idx.pos]]
print(temp_idx.pos)
print(temp_db.pos)
# plot
p2_af_filter$temp_ms2_match.pos = ms2_plot_mass_dataset_mz(
object = p2_af_filter$object_pos_temp.af,
polarity = "positive",
variable_id = p2_af_filter$pos_vari_id,
database = temp_db.pos,
show_mz = show_mz,
show_detail = show_detail
)
print(p2_af_filter$temp_ms2_match.pos[[1]])
# vis
output$pos_match_mz <- renderUI({
if (is.null(p2_af_filter$temp_ms2_match.pos)) { return() }
plot_type <- input$af_plt_format
if (plot_type) {
plotlyOutput(outputId = ns("plotly_pos_match_mz"))
} else {
plotOutput(outputId = ns("plot_pos_match_mz"))
}
})
output$plot_pos_match_mz <- renderPlot({
if (is.null(p2_af_filter$temp_ms2_match.pos)) { return() }
p2_af_filter$temp_ms2_match.pos[[1]]
})
output$plotly_pos_match_mz <- renderPlotly({
if (is.null(p2_af_filter$temp_ms2_match.pos)) { return() }
plotly::ggplotly(p2_af_filter$temp_ms2_match.pos[[1]])
})
}, error = function(e) {
message("Error occurred: ", e$message)
})
})
observeEvent(input$af_show_mirror_plot.neg, {
tryCatch({
if (is.null(p2_af_filter$object_neg_temp.af)) {
return()
}
if (is.null(p2_af_filter$neg_clean_anno)) {
return()
}
# plot neg
show_mz = input$show_mz
if (show_mz == "TRUE") { show_mz = TRUE } else { show_mz = FALSE }
show_detail = input$show_detail
if (show_detail == "TRUE") { show_detail = TRUE } else { show_detail = FALSE }
af_neg_row_idx = input$MS2_neg_tbl_rows_selected
af_neg_row = p2_af_filter$temp_af_neg_tbl[af_neg_row_idx, ]
p2_af_filter$neg_vari_id = af_neg_row[[1]]
p2_af_filter$neg_db_name = af_neg_row[[4]]
temp_idx.neg = match(p2_af_filter$neg_db_name, p2_af_filter$db.name)
temp_db.neg = p2_af_filter$dblist[[temp_idx.neg]]
p2_af_filter$temp_ms2_match.neg = ms2_plot_mass_dataset_mz(
object = p2_af_filter$object_neg_temp.af,
polarity = "negative",
variable_id = p2_af_filter$neg_vari_id,
database = temp_db.neg,
show_mz = show_mz,
show_detail = show_detail
)
# mv plot original neg
output$neg_match_mz <- renderUI({
plot_type <- input$af_plt_format
if (plot_type) {
plotlyOutput(outputId = ns("plotly_neg_match_mz"))
} else {
plotOutput(outputId = ns("plot_neg_match_mz"))
}
})
output$plot_neg_match_mz <- renderPlot({
if (is.null(p2_af_filter$temp_ms2_match.neg)) { return() }
p2_af_filter$temp_ms2_match.neg[[1]]
})
output$plotly_neg_match_mz <- renderPlotly({
if (is.null(p2_af_filter$temp_ms2_match.neg)) { return() }
plotly::ggplotly(p2_af_filter$temp_ms2_match.neg[[1]])
})
}, error = function(e) {
message("Error occurred: ", e$message)
})
})
# download ----------------------------------------------------------------
###> fig1 =====
output$fig1_download = downloadHandler(
filename = function() {
paste0(p2_af_filter$pos_vari_id,"_ms_ms_mirror_plot.", download_para()$fig1_format)
},
content = function(file) {
# extract parameters
para_d <- download_para()
# draw condition
p = p2_af_filter$temp_ms2_match.pos[[1]]
# save plot
ggsave(
filename = file,
plot = p,
width = para_d$fig1_width,
height = para_d$fig1_height,
device = para_d$fig1_format
)
}
)
###> fig2 ====
output$fig2_download = downloadHandler(
filename = function() {
paste0(p2_af_filter$neg_vari_id,"_ms_ms_mirror_plot.", download_para()$fig2_format)
},
content = function(file) {
# extract parameters
para_d <- download_para()
# draw condition
p = p2_af_filter$temp_ms2_match.neg
# save plot
ggsave(
filename = file,
plot = p,
width = para_d$fig2_width,
height = para_d$fig2_height,
device = para_d$fig2_format
)
}
)
})
}
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
library(plantmdb)
run_tidymass_shiny()
load("/Volumes/Data_Temp/demo_data/mass_dataset/06.object_pos_ms2.rda")
object_pos_ms2
load("/Volumes/Data_Temp/demo_data/mass_dataset/._06.object_neg_ms2.rda")
load("/Volumes/Data_Temp/demo_data/mass_dataset/06.object_neg_ms2.rda")
object_neg_ms2
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
library(tidyverse)
library(tidymass)
library(plantmdb)
run_tidymass_shiny()
devtools::document()
devtools::install()
library(plantmdb)
run_tidymass_shiny()
devtools::install()
gc()
devtools::install()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
data_import_massdataset_server <- function(id, volumes, prj_init, data_import_rv, data_export_rv) {
moduleServer(id, function(input, output, session) {
ns <- session$ns
#> sidebar2 - from massdataset
observeEvent(input$toggleSidebar, {
shinyjs::toggle(id = "Sidebar")
})
## 3.5 import from mass_dataset class -------------------------------------------
#> File check
para_obj_check <- reactiveValues(
data = NULL,
object.pos = NULL,
object.neg = NULL
)
#> Main processing event
observeEvent(input$action1.3, {
req(prj_init$wd)  # Ensure working directory exists
# Initialize variables
error_messages <- character()
detected_models <- character()
alert_content <- ""
validation_results <- list()
# Build alert header
alert_content <- paste0(
'<div style="text-align: left; font-size: 14px;">',
'<h4 style="color: #2c3e50; margin-top: 0;">File Validation Report</h4>'
)
# Process Positive File
if (!is.null(input$Pos_obj_mass)) {
temp_pos_path <- input$Pos_obj_mass$datapath
pos_val <- validate_file(temp_pos_path, "positive", "Positive model file")
validation_results$pos <- pos_val
alert_content <- paste0(
alert_content,
'<div style="margin-bottom: 12px;">',
'<span style="display: inline-block; width: 30px; color: ',
ifelse(pos_val$success, '#27ae60', '#e74c3c'), ';">',
ifelse(pos_val$success, '✓', '✗'), '</span>',
'<span style="font-weight: 500;">Positive File:</span> ',
basename(input$Pos_obj_mass$name),
if (!pos_val$success) paste0(
'<br><span style="color: #e74c3c; font-size: 12px; padding-left: 30px;">',
pos_val$message, '</span>'
),
'</div>'
)
if (pos_val$success) {
loaded <- load(temp_pos_path)
para_obj_check$object.pos <- get(loaded)
detected_models <- c(detected_models, "positive")
}
}
# Process Negative File
if (!is.null(input$Neg_obj_mass)) {
temp_neg_path <- input$Neg_obj_mass$datapath
neg_val <- validate_file(temp_neg_path, "negative", "Negative model file")
validation_results$neg <- neg_val
alert_content <- paste0(
alert_content,
'<div style="margin-bottom: 12px;">',
'<span style="display: inline-block; width: 30px; color: ',
ifelse(neg_val$success, '#27ae60', '#e74c3c'), ';">',
ifelse(neg_val$success, '✓', '✗'), '</span>',
'<span style="font-weight: 500;">Negative File:</span> ',
basename(input$Neg_obj_mass$name),
if (!neg_val$success) paste0(
'<br><span style="color: #e74c3c; font-size: 12px; padding-left: 30px;">',
neg_val$message, '</span>'
),
'</div>'
)
if (neg_val$success) {
loaded <- load(temp_neg_path)
para_obj_check$object.neg <- get(loaded)
detected_models <- c(detected_models, "negative")
}
}
# Add validation summary
alert_content <- paste0(
alert_content,
'<hr style="border-color: #ecf0f1; margin: 15px 0;">',
'<div style="color: #7f8c8d; font-size: 13px;">',
'<strong>Detected Models:</strong> ',
if (length(detected_models) paste(detected_models, collapse = " + ") else "None",
devtools::document()
devtools::install()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
library(tidyverse)
desc_anno <- readxl::read_xlsx("/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/all.xlsx")
desc_anno <- readxl::read_xlsx("/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/all.xlsx") %>% select(1:3)
desc_anno <- readxl::read_xlsx("/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/all.xlsx") %>% dplyr::select(1:3)
desc_anno
fpkm_clean <- read.delim("/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/02.Data/FPKM_clean.txt")
desc_anno <- readxl::read_xlsx("/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/all.xlsx") %>% dplyr::select(1:3)
fpkm_clean <- read.delim("/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/02.Data/FPKM_clean.txt")
fpkm_clean %>% left_join(desc_anno)
fpkm_clean_anno <-
fpkm_clean %>% left_join(desc_anno)
fpkm_clean_anno
fpkm_clean_anno <-
fpkm_clean %>% left_join(desc_anno) %>%
distinct()
fpkm_clean_anno <-
fpkm_clean %>% left_join(desc_anno) %>%
distinct() %>%
relocate(Description,.after = GeneID) %>%
relocate(`Other Name(Type)`,.after = Description)
write_xlsx(fpkm_clean_anno,"/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/fpkm_clean_anno.xlsx")
writexl::write_xlsx(fpkm_clean_anno,"/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/fpkm_clean_anno.xlsx")
library(tidyverse)
desc_anno <- readxl::read_xlsx("/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/all.xlsx") %>% dplyr::select(1:3)
fpkm_clean <- read.delim("/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/02.Data/FPKM_clean.txt")
fpkm_clean_anno <-
fpkm_clean %>% left_join(desc_anno) %>%
distinct() %>%
relocate(Description,.after = GeneID) %>%
relocate(`Other Name(Type)`,.after = Description)
writexl::write_xlsx(fpkm_clean_anno,"/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/fpkm_clean_anno.xlsx")
writexl::write_xlsx(fpkm_clean_anno,"/Users/shawn/SynologyDrive/课题组其他重要课题/MYB转录组/fpkm_clean_anno.xlsx")
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
validate_file("/Volumes/Data_Temp/demo_data/mass_dataset/01.object_pos_raw.rda","positive", "Positive model file")
validate_file("/Volumes/Data_Temp/demo_data/mass_dataset/06.object_pos_ms2.rda","positive", "Positive model file")
path = "/Volumes/Data_Temp/demo_data/mass_dataset/01.object_pos_raw.rda"
validate_file("/Volumes/Data_Temp/demo_data/mass_dataset/06.object_pos_ms2.rda","positive", "uploaded positive file")
expected_polarity = "positive"
object_label = "uploaded positive file""
object_label = "uploaded positive file"
# Validation
if (is.null(path)) {
return(list(success = FALSE, message = "Path is null"))
}
if (!stringr::str_detect(path, "\\.rda$")) {
return(list(success = FALSE, message = paste("Wrong file format:", object_label)))
}
# Load object
obj_name <- load(path)
obj_name
obj <- get(obj_name)
obj
# Check object class
if (!inherits(obj, "mass_dataset")) {
return(list(success = FALSE, message = paste("Wrong object class:", object_label)))
}
# Check polarity
polarity <- tryCatch(
obj@process_info$process_data@parameter$polarity,
error = function(e) NA_character_
)
polarity
obj@process_info
obj@process_info$process_data
obj@process_info
obj@process_info$process_data
obj
obj@process_info$process_data@parameter$polarity
obj@process_info$process_data@parameter
obj@process_info$process_data
obj@variable_info$variable_id[,1]
(obj@variable_info$variable_id)[,1]
obj@variable_info$variable_id
(obj@variable_info$variable_id)[1]
str_detect(string = obj@variable_info$variable_id)[1],"POS|NEG")
str_detect(string = (obj@variable_info$variable_id)[1],"POS|NEG")
str_extract(string = (obj@variable_info$variable_id)[1],"POS|NEG")
# Check polarity
polarity <- tryCatch(
temp_polarity = str_extract(string = (obj@variable_info$variable_id)[1],"POS|NEG")
error = function(e) NA_character_
# Check polarity
polarity <- tryCatch(
temp_polarity = str_extract(string = (obj@variable_info$variable_id)[1],"POS|NEG"),
error = function(e) NA_character_
)
polarity
str_extract(string = (obj@variable_info$variable_id)[1],"POS|NEG")
# Check polarity
polarity <- tryCatch(
str_extract(string = (obj@variable_info$variable_id)[1],"POS|NEG"),
error = function(e) NA_character_
)
polarity
if(polarity == "POS") { polarity = "positive"} else if(polarity == "NEG") {polarity = "negative"}
polarity
if (is.na(polarity) || polarity != expected_polarity) {
return(list(success = FALSE, message = paste0("Wrong polarity: ", object_label, "\nExpected: ", expected_polarity,
"\nTested: ", ifelse(is.na(polarity), "NA", polarity))))
}
devtools::document()
devtools::install()
run_tidymass_shiny()
load("/Volumes/Data_Temp/demo_data/mass_dataset/06.object_pos_ms2.rda")
library(tidymass)
object_pos_anno <-
annotate_metabolites_mass_dataset(
object = object_pos_ms2,polarity = "positive"
)
load("/Volumes/Data_Temp/cuz_db/hmdb_ms2_merged.rda")
object_pos_anno <-
annotate_metabolites_mass_dataset(
object = object_pos_ms2,polarity = "positive",database = hmdb_ms2)
object_pos_anno <-
annotate_metabolites_mass_dataset(
object = object_pos_ms2,polarity = "positive",database = hmdb_ms2,threads = 1)
object_pos_anno %>% extract_annotation_table()
object_pos_anno %>% extract_annotation_table() %>% colnames()
object_pos_anno@variable_info
annotate_metabolites_mass_dataset
metIdentify_mass_dataset
metIdentification
devtools::document()
devtools::install()
library(tidyverse)
library(tidymass)
library(massdbbuildin)
run_tidymass_shiny()
