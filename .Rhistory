object_final %>% activate_mass_dataset("annotation_table") %>%
left_join(anno_ori) %>%
group_by(variable_id) %>% slice_head(n = 1) %>% ungroup()
##> extract Lab.ID as hook
temp_labid_hook <- object_final %>% extract_annotation_table() %>%
dplyr::select(Lab.ID)
##> match metabolite origin from database
anno_ori <- map_dfr(.x = temp_db,.f = function(.x){
temp_orign_db <- .x@spectra.info %>%
dplyr::select(Lab.ID,starts_with("from")) %>%
mutate_if(is.factor,as.character)
temp_out <- inner_join(temp_labid_hook,temp_orign_db,by = "Lab.ID")
}) %>% distinct()
##> add metabolite origin information to mass_dataset@annotation_table
object_final <-
object_final %>% activate_mass_dataset("annotation_table") %>%
left_join(anno_ori)
##> load mass_dataaset object with final filtered annnotation
load("/Volumes/Samsung_T5/demo_data/mass_dataset/09.object_clean.rda")
##> match metabolite origin from database
anno_ori <- map_dfr(.x = temp_db,.f = function(.x){
temp_orign_db <- .x@spectra.info %>%
dplyr::select(Lab.ID,starts_with("from")) %>%
mutate_if(is.factor,as.character)
temp_out <- inner_join(temp_labid_hook,temp_orign_db,by = "Lab.ID")
}) %>% distinct()
##> add metabolite origin information to mass_dataset@annotation_table
object_final <-
object_final %>% activate_mass_dataset("annotation_table") %>%
left_join(anno_ori)
##> extract final annotation table
anno_with_ori <- object_final %>% extract_annotation_table()
##> start analyze_metabolite_origins
object_final = metid::analyze_metabolite_origins(object_final)
##> draw specific feature origin network
temp_variable_id = "M84T65_POS"
temp_variable_id
metabolites_id = anno_with_ori %>% dplyr::filter(variable_id == temp_variable_id) %>% pull(Lab.ID)
metabolites_id
##> check metabolite origin
metabolite_origin_network(object = object_final,metabolite_id = metabolites_id[1])
##> check metabolite origin
metabolite_origin_network(object = object_final,metabolite_id = metabolites_id[2])
##> check metabolite origin
metabolite_origin_network(object = object_final,metabolite_id = metabolites_id[3])
##> check metabolite origin
metabolite_origin_network(object = object_final,metabolite_id = metabolites_id[1])
metabolites_id
metabolite_id = metabolites_id[2]
temp_data <- object@annotation_table %>% dplyr::select(Lab.ID,
from_human, from_which_part, from_bacteria, from_which_bacteria,
from_plant, from_which_plant, from_animal, from_which_animal,
from_environment, from_which_environment, from_drug,
from_which_drug, from_food, from_which_food) %>% dplyr::filter(Lab.ID %in%
metabolite_id)
colnames(temp_data) <- c("Lab.ID", "Human", "Human_name",
"Bacteria", "Bacteria_name", "Plant", "Plant_name", "Animal",
"Animal_name", "Environment", "Environment_name", "Drug",
"Drug_name", "Food", "Food_name")
temp_data
##> extract final annotation table
anno_with_ori <- object_final %>% extract_annotation_table() %>%
group_by(variable_id) %>% slice_head(n = 1)
metabolites_id = anno_with_ori %>% dplyr::filter(variable_id == temp_variable_id) %>% pull(Lab.ID)
##> check metabolite origin
metabolite_origin_network(object = object_final,metabolite_id = metabolites_id)
anno_with_ori %>% pull(variable_id)
##> draw specific feature origin network
temp_variable_id = "M365T66_POS"
metabolites_id = anno_with_ori %>% dplyr::filter(variable_id == temp_variable_id) %>% pull(Lab.ID)
##> check metabolite origin
metabolite_origin_network(object = object_final,metabolite_id = metabolites_id)
names(temp_db)
devtools::document()
devtools::install()
library(tidymassshiny)
run_tidymass_shiny()
run_tidymass_shiny(maxRequestSize = 1000)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
run_tidymass_shiny(maxRequestSize = 1000)
check_massdata_info
devtools::document()
annotation_origin_server <- function(id, volumes, prj_init, data_import_rv,
data_clean_rv, data_export_rv) {
moduleServer(id, function(input, output, session) {
ns <- session$ns
load_rdata <- function(path) {
tryCatch({
env <- new.env()
load(path, envir = env)
objs <- ls(env)
if(length(objs) != 1) stop("File should contain exactly one object")
get(objs, envir = env)
}, error = function(e) {
shinyalert(
title = "Load Error",
text = paste("Failed to load file:", e$message),
type = "error"
)
return(NULL)
})
}
data_ori <- reactiveValues(
temp_db = NULL,
object_final = NULL,
anno_with_ori = NULL
)
observeEvent(input$checkdb, {
tryCatch({
if (!is.null(input$dblist)) {
data_ori$temp_db <- load_rdata(input$dblist$datapath)
} else if (!is.null(data_clean_rv$db)) {
data_ori$temp_db <- data_clean_rv$db
} else {
data_ori$temp_db <- prj_init$dblist
}
shinyalert(
title = "Database Validated",
text = paste(
"Successfully loaded database with",
length(data_ori$temp_db), "entries.\n",
"Database Names:", paste(names(data_ori$temp_db), collapse = ", ")
),
type = "success"
)
}, error = function(e) {
shinyalert(
title = "Validation Failed",
text = paste("Error:", e$message),
type = "error"
)
})
})
observeEvent(input$start_origin, {
req(data_ori$temp_db)
tryCatch({
shinyalert(
title = "Analysis in Progress",
text = "Processing metabolite origin analysis...",
type = "info",
timer = 2000,
showConfirmButton = FALSE
)
if (!is.null(input$saved_obj)) {
data_ori$object_final <- load_rdata(input$saved_obj$datapath)
} else {
data_ori$object_final <- data_clean_rv$object_final
}
##> extract Lab.ID as hook
temp_labid_hook <- data_ori$object_final %>% extract_annotation_table() %>%
dplyr::select(Lab.ID)
##> match metabolite origin from database
anno_ori <- map_dfr(.x = data_ori$temp_db,.f = function(.x){
temp_orign_db <- .x@spectra.info %>%
dplyr::select(Lab.ID,starts_with("from")) %>%
mutate_if(is.factor,as.character)
temp_out <- inner_join(temp_labid_hook,temp_orign_db,by = "Lab.ID")
}) %>% distinct()
##> add metabolite origin information to mass_dataset@annotation_table
data_ori$object_final <-
data_ori$object_final %>% activate_mass_dataset("annotation_table") %>%
left_join(anno_ori)
data_ori$object_final = metid::analyze_metabolite_origins(data_ori$object_final)
##> extract final annotation table
data_ori$anno_with_ori <-  data_ori$object_final %>% extract_annotation_table() %>%
group_by(variable_id) %>% slice_head(n = 1)
output$anno_with_ori = renderDataTable_formated(
actions = input$start_origin,
condition1 = data_ori$anno_with_ori,filename.a = "3.6.6.annotation_neg",
tbl = data_ori$anno_with_ori %>% dplyr::select(variable_id,Compound.name,Lab.ID)
)
output$upsetplot = renderPlot(
if(is.null(data_ori$object_final)) {return()}
para = para_plot1(),
devtools::document()
devtools::install()
devtools::install()
run_tidymass_shiny()
run_tidymass_shiny(maxRequestSize = 1000)
devtools::document()
run_tidymass_shiny(maxRequestSize = 1000)
devtools::document()
run_tidymass_shiny(maxRequestSize = 1000)
devtools::document()
run_tidymass_shiny(maxRequestSize = 1000)
##> load mass_dataaset object with final filtered annnotation
load("/Volumes/Samsung_T5/demo_data/mass_dataset/09.object_clean.rda")
##> load annotation database list
load("/Volumes/Samsung_T5/demo_data/temp/Anno_Database/auto_saved.dblist")
##> extract Lab.ID as hook
temp_labid_hook <- object_final %>% extract_annotation_table() %>%
dplyr::select(Lab.ID)
##> match metabolite origin from database
anno_ori <- map_dfr(.x = temp_db,.f = function(.x){
temp_orign_db <- .x@spectra.info %>%
dplyr::select(Lab.ID,starts_with("from")) %>%
mutate_if(is.factor,as.character)
temp_out <- inner_join(temp_labid_hook,temp_orign_db,by = "Lab.ID")
}) %>% distinct()
##> load mass_dataaset object with final filtered annnotation
load("/Volumes/Samsung_T5/demo_data/mass_dataset/09.object_clean.rda")
object_final %>% extract_annotation_table() %>% colnames()
##> load annotation database list
load("/Volumes/Samsung_T5/demo_data/temp/Anno_Database/auto_saved.dblist")
##> extract Lab.ID as hook
temp_labid_hook <- object_final %>% extract_annotation_table() %>%
dplyr::select(Lab.ID)
##> match metabolite origin from database
anno_ori <- map_dfr(.x = temp_db,.f = function(.x){
temp_orign_db <- .x@spectra.info %>%
dplyr::select(Lab.ID,starts_with("from")) %>%
mutate_if(is.factor,as.character)
temp_out <- inner_join(temp_labid_hook,temp_orign_db,by = "Lab.ID")
}) %>% distinct()
##> add metabolite origin information to mass_dataset@annotation_table
object_final <-
object_final %>% activate_mass_dataset("annotation_table") %>%
left_join(anno_ori)
object_final %>% extract_annotation_table() %>% colnames()
##> extract final annotation table
anno_with_ori <- object_final %>% extract_annotation_table() %>%
group_by(variable_id) %>% slice_head(n = 1)
##> start analyze_metabolite_origins
object_final = metid::analyze_metabolite_origins(object_final)
##> generate upsetplot of origin info
upsetplot = metabolite_origin_upsetplot_fix(object = object_final,min_size = 5)
##> draw specific feature origin network
temp_variable_id = "M365T66_POS"
metabolites_id = anno_with_ori %>% dplyr::filter(variable_id == temp_variable_id) %>% pull(Lab.ID)
##> check metabolite origin
network_plt = metabolite_origin_network(object = object_final,metabolite_id = metabolites_id)
network_plt
upsetplot
run_tidymass_shiny()
run_tidymass_shiny(maxRequestSize = 1000)
##> load mass_dataaset object with final filtered annnotation
load("/Volumes/Samsung_T5/demo_data/mass_dataset/09.object_clean.rda")
##> load annotation database list
load("/Volumes/Samsung_T5/demo_data/temp/Anno_Database/auto_saved.dblist")
##> extract Lab.ID as hook
temp_labid_hook <- object_final %>% extract_annotation_table() %>%
dplyr::select(Lab.ID)
##> match metabolite origin from database
anno_ori <- map_dfr(.x = temp_db,.f = function(.x){
temp_orign_db <- .x@spectra.info %>%
dplyr::select(Lab.ID,starts_with("from")) %>%
mutate_if(is.factor,as.character)
temp_out <- inner_join(temp_labid_hook,temp_orign_db,by = "Lab.ID")
}) %>% distinct()
library(tidyverse)
library(tidymass)
##> extract Lab.ID as hook
temp_labid_hook <- object_final %>% extract_annotation_table() %>%
dplyr::select(Lab.ID)
##> match metabolite origin from database
anno_ori <- map_dfr(.x = temp_db,.f = function(.x){
temp_orign_db <- .x@spectra.info %>%
dplyr::select(Lab.ID,starts_with("from")) %>%
mutate_if(is.factor,as.character)
temp_out <- inner_join(temp_labid_hook,temp_orign_db,by = "Lab.ID")
}) %>% distinct()
##> add metabolite origin information to mass_dataset@annotation_table
object_final <-
object_final %>% activate_mass_dataset("annotation_table") %>%
left_join(anno_ori)
##> extract final annotation table
anno_with_ori <- object_final %>% extract_annotation_table() %>%
group_by(variable_id) %>% slice_head(n = 1)
##> start analyze_metabolite_origins
object_final = metid::analyze_metabolite_origins(object_final)
##> generate upsetplot of origin info
upsetplot = metabolite_origin_upsetplot_fix(object = object_final,min_size = 5)
##> generate upsetplot of origin info
upsetplot = metabolite_origin_upsetplot(object = object_final,min_size = 5)
library(tidymassshiny)
##> extract final annotation table
anno_with_ori <- object_final %>% extract_annotation_table() %>%
group_by(variable_id) %>% slice_head(n = 1)
##> generate upsetplot of origin info
upsetplot = metabolite_origin_upsetplot_fix(object = object_final,min_size = 5)
upsetplot
##> draw specific feature origin network
temp_variable_id = "M365T66_POS"
metabolites_id = anno_with_ori %>% dplyr::filter(variable_id == temp_variable_id) %>% pull(Lab.ID)
##> check metabolite origin
network_plt = metabolite_origin_network(object = object_final,metabolite_id = metabolites_id)
network_plt
devtools::document()
devtools::install()
run_tidymass_shiny()
run_tidymass_shiny(maxRequestSize = 10000)
devtools::document()
devtools::document()
devtools::install()
run_tidymass_shiny(maxRequestSize = 1000)
devtools::document()
devtools::install()
library(tidyverse)
library(tidymass)
library(tidymassshiny)
run_tidymass_shiny()
run_tidymass_shiny(maxRequestSize = 1000)
devtools::document()
devtools::install()
run_tidymass_shiny(maxRequestSize = 1000)
devtools::document()
devtools::install()
run_tidymass_shiny()
run_tidymass_shiny(maxRequestSize = 1000)
devtools::document()
devtools::install()
run_tidymass_shiny(maxRequestSize = 1000)
run_tidymass_shiny(maxRequestSize = 1000)
?masscleaner::normalize_data
normalize_data
run_tidymass_shiny(maxRequestSize = 10000)
library(tidyverse)
library(tidymass)
library(tidymassshiny)
run_tidymass_shiny(
maxRequestSize = 1000
)
load("/Volumes/Samsung_T5/New_Demo/MS1/NEG/Result/object")
tidymassshiny::massqc_pca_3d(object = object,color_by = "group")
run_tidymass_shiny(maxRequestSize = 1000)
devtools::document()
devtools::install()
library(tidyverse)
library(tidymass)
library(tidymassshiny)
run_tidymass_shiny()
library(tidymassshiny)
run_tidymass_shiny()
devtools::document()
devtools::document()
devtools::install()
run_tidymass_shiny()
gc()
library(tidymass)
convert_metabolite_id
convert_metabolite_id_oliver
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
install.packages("bsicon")
install.packages("bsicons")
run_tidymass_shiny()
library(tidymassshiny)
run_tidymass_shiny()
devtools::document()
devtools::install()
convert_metabolite_id
convert_metabolite_id_openai
openai_chemical_sources
convert_metabolite_id_chemspider
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
massdatabase::download_kegg_pathway
massdatabase::download_kegg_pathway(path = "~/temp_file/",organism = "ath",sleep = 1.2)
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
run_tidymass_shiny()
metpath::request_kegg_pathway_info
massdatabase::request_kegg_pathway_info
devtools::install()
devtools::document()
run_tidymass_shiny()
setwd("/Volumes/Data_Temp/New_Demo/kegg_path/")
kegg_pathway_database <- massdatabase::read_kegg_pathway(path = ".")
kegg_org_pathway <- massdatabase::convert_kegg2metpath(
data = kegg_pathway_database,
path = ".",
threads = 5
)
kegg_org_pathway
print(kegg_org_pathway)
devtools::document()
devtools::document()
getwd()
setwd("~/myrepo/tidymass_shiny/")
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
devtools::document()
devtools::install()
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
load("/Volumes/Data_Temp/New_Demo/kegg_pathway_db/kegg_dme_pathway.rda")
kegg_org_pathway@database_info
kegg_org_pathway@pathway_name
kegg_org_pathway@pathway_id
devtools::document()
devtools::install()
run_tidymass_shiny()
library(tidymassshiny)
run_tidymass_shiny()
devtools::document()
devtools::install()
library(tidymassshiny)
run_tidymass_shiny()
tidymass::update_tidymass()
Sys.getenv()
Sys.getenv("HOME")
shinyFiles::getVolumes()()
get_volumes_win()
devtools::install()
library(tidymassshiny)
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
devtools::install()
log(1.2)
log2(1.2)
devtools::document()
devtools::document()
devtools::install(dependencies = F)
run_tidymass_shiny()
devtools::document()
devtools::install(dependencies = F)
run_tidymass_shiny()
devtools::document()
devtools::install(dependencies = F)
run_tidymass_shiny()
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
devtools::install(dependencies = F)
run_tidymass_shiny()
devtools::install(dependencies = F)
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
devtools::install(dependencies = F)
run_tidymass_shiny()
devtools::document()
devtools::install(dependencies = F)
run_tidymass_shiny()
devtools::document()
devtools::document()
devtools::install(dependencies = F)
run_tidymass_shiny()
devtools::document()
devtools::install(dependencies = F)
run_tidymass_shiny()
run_tidymass_shiny()
ls
massdatabase::read_kegg_pathway(path = "/Volumes/HubDisk/SynologyDrive/平台/CYL/")
kegg_pathway_database <- massdatabase::read_kegg_pathway(path = "/Volumes/HubDisk/SynologyDrive/平台/CYL/")
class(kegg_pathway_database)
kegg_org_pathway <- massdatabase::convert_kegg2metpath(
data = kegg_pathway_database,
path = "/Volumes/HubDisk/SynologyDrive/平台/CYL/",
threads = 5
)
kegg_org_pathway
convert_kegg2metpath
massdatabase::convert_kegg2metpath
massdatabase::convert_kegg2metpath
path = "~/Downloads"
kegg_pathway_database
kegg_pathway_database[[1]]$describtion
(kegg_pathway_database[[1]]$describtion) %>% class()
lapply(kegg_pathway_database, function(x)
paste0(x$describtion, collapse = "{}"))
lapply(kegg_pathway_database, function(x) paste0(x$describtion, collapse = "{}"))
lapply(kegg_pathway_database, function(x) paste0(x$describtion, collapse = "{}")) %>% unlist()
lapply(kegg_pathway_database, function(x) paste0(x$pathway_class, collapse = "{}")) %>% unlist()
