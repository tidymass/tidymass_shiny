}})
observe({
shinyFileChoose(input, "metabolite_database", roots = volumes, session = session)
if(!is.null(input$metabolite_database)){
# browser()
temp_file_text <-parseFilePaths(roots = volumes,  input$metabolite_database)
output$file5_path <- renderText(temp_file_text$datapath)
}})
observe({
shinyFileChoose(input, "adduct.table", roots = volumes, session = session)
if(!is.null(input$adduct.table)){
# browser()
temp_file_text <-parseFilePaths(roots = volumes,  input$adduct.table)
output$file6_path <- renderText(temp_file_text$datapath)
}})
observeEvent(
input$fpa_start,{
temp_file_text <-parseFilePaths(roots = volumes,  input$fpa_result)
fpa_result_path <- renderText(temp_file_text$datapath)
temp_file_text <-parseFilePaths(roots = volumes,  input$feature_table_marker)
feature_table_marker_path <- renderText(temp_file_text$datapath)
if(str_detect(fpa_result_path,"\\.rda") & str_detect(feature_table_marker_path,"\\.rda")) {
fpa_values$fpa_result = load(file = fpa_result_path)
fpa_values$feature_table_marker = load(file = feature_table_marker_path)
}
temp_file_text <-parseFilePaths(roots = volumes,  input$metabolic_network)
metabolic_network_path <- renderText(temp_file_text$datapath)
temp_file_text <-parseFilePaths(roots = volumes,  input$pathway_database)
pathway_database_path <- renderText(temp_file_text$datapath)
temp_file_text <-parseFilePaths(roots = volumes,  input$metabolite_database)
metabolite_database_path <- renderText(temp_file_text$datapath)
temp_file_text <-parseFilePaths(roots = volumes,  input$adduct.table)
adduct.table_path <- renderText(temp_file_text$datapath)
if(str_detect(fpa_result_path,"\\.rda",negate = T) &
str_detect(feature_table_marker_path,"\\.rda") &
str_detect(metabolic_network_path,"\\.rda") &
str_detect(pathway_database_path,"\\.rda") &
str_detect(metabolite_database_path,"\\.rda")) {
fpa_values$feature_table_marker = load(file = feature_table_marker_path)
metabolic_network= load(file = metabolic_network_path)
pathway_database = load(file = pathway_database_path)
metabolite_database_path = load(file = metabolite_database_path)
if(str_detect(fpa_result_path,"\\.rda",negate = T)){
adduct.table = NULL
} else {
adduct.table = load(adduct.table_path)
}
pro_enrichment_step1 = c(
'running FPA analysis ...',
'All finish'
)
para = fpa_para()
fpa_values$fpa_result = metpath::perform_fpa(
feature_table_marker = fpa_values$feature_table_marker,
feature_table_all = feature_table_all,
metabolite_database = metabolite_database,
column = para$column,
adduct.table = adduct.table,
ms1.match.ppm = para$ms1.match.ppm,
rt.match.tol = para$rt.match.tol,
mz.ppm.thr = para$mz.ppm.thr,
threads = para$threads,
include_hidden_metabolites = para$include_hidden_metabolites,
metabolic_network = metabolic_network,
pathway_database =pathway_database
)
output$network_tbl = renderDataTable_formated(
actions = input$fpa_start,
filename.a = paste0("fpa_annotation_table.xls"),
tbl = fpa_values$fpa_result$annotation_table
)
output$module_tbl = renderDataTable_formated(
actions = input$fpa_start,
filename.a = paste0("fpa_dysregulated_metabolic_module.xls"),
tbl = fpa_values$fpa_result$dysregulated_metabolic_module
)
} else {return()}
}
)
observeEvent(
input$show_network_plot,{
if (is.null(fpa_values$fpa_result) | is.null(fpa_values$feature_table_marker)){
return()
} else {
output$network_plt = renderPlot({
para = fig2_para()
metpath::plot_metabolic_network_fpa(
fpa_result = fpa_values$fpa_result,
feature_table_marker = fpa_values$feature_table_marker,
include_feature = para$include_feature,
node_color_by_module = para$node_color_by_module,
include_hidden_metabolites = para$include_hidden_metabolites,
add_compound_name = para$add_compound_name,
layout = para$layout
)
}
)
}
}
)
}
)}
fpa_ui <- function(id) {
ns <- NS(id)
nav_panel(
title = 'Feature-based Pathway Analysis (FPA)',
icon = bs_icon("diagram-3"),
layout_sidebar(
sidebar = accordion(
accordion_panel(
title = "Data upload",
icon = bsicons::bs_icon("upload"),
shinyFilesButton(
id = ns('fpa_result'),
buttonType = "default",
title = "load fpa_result",
label = 'fpa_result(.rda | option)',
class = NULL,, multiple = FALSE,
icon = bsicons::bs_icon("files")
),
tags$span(textOutput(outputId = ns("file0_path")), class = "text-wrap"),
shinyFilesButton(
id = ns('feature_table_marker'),
buttonType = "default",
title = "load feature_table_marker",
label = 'feature_table_marker(.rda)',
class = NULL,, multiple = FALSE,
icon = bsicons::bs_icon("files")
),
tags$span(textOutput(outputId = ns("file1_path")), class = "text-wrap"),
shinyFilesButton(
id = ns('feature_table_all'),
buttonType = "default",
title = "load feature_table_all",
label = 'feature_table_all(.rda)',
class = NULL,, multiple = FALSE,
icon = bsicons::bs_icon("files")
),
tags$span(textOutput(outputId = ns("file2_path")), class = "text-wrap"),
shinyFilesButton(
id = ns('metabolic_network'),
buttonType = "default",
title = "load metabolic_network",
label = 'metabolic_network(.rda)',
class = NULL,, multiple = FALSE,
icon = bsicons::bs_icon("files")
),
tags$span(textOutput(outputId = ns("file3_path")), class = "text-wrap"),
shinyFilesButton(
id = ns('pathway_database'),
buttonType = "default",
title = "load pathway_database",
label = 'pathway_database(.rda)',
class = NULL,, multiple = FALSE,
icon = bsicons::bs_icon("files")
),
tags$span(textOutput(outputId = ns("file4_path")), class = "text-wrap"),
shinyFilesButton(
id = ns('metabolite_database'),
buttonType = "default",
title = "load metabolite_database",
label = 'metabolite_database(.rda)',
class = NULL,, multiple = FALSE,
icon = bsicons::bs_icon("database-add")
),
tags$span(textOutput(outputId = ns("file5_path")), class = "text-wrap"),
shinyFilesButton(
id = ns('adduct.table'),
buttonType = "default",
title = "load adduct.table",
label = 'adduct.table(.rda | option)',
class = NULL,, multiple = FALSE,
icon = bsicons::bs_icon("files")
),
tags$span(textOutput(outputId = ns("file6_path")), class = "text-wrap")
),
accordion_panel(
title = "Set parameters",
icon = bsicons::bs_icon("gear"),
selectInput(
inputId = ns("fpa_column"),
label = tooltip(
trigger = list(
"column",
bsicons::bs_icon("info-circle")
),
"rp: reverse phase \nhilic: HILIC column"
),choices = c("rp","hilic"), selected = "rp"
),
textInput(
inputId = ns("fpa_ms1.match.ppm"),
label = tooltip(
trigger = list(
"ms1.match.ppm",
bsicons::bs_icon("info-circle")
),
"mass tolerance for MS1 matching in parts per million (ppm). Default is '25'"
),value = 25
),
textInput(
inputId = ns("fpa_rt.match.tol"),
label = tooltip(
trigger = list(
"rt.match.tol",
bsicons::bs_icon("info-circle")
),
"retention time tolerance threshold in seconds. Default is '5'"
),value = 5
),
textInput(
inputId = ns("fpa_mz.ppm.thr"),
label = tooltip(
trigger = list(
"mz.ppm.thr",
bsicons::bs_icon("info-circle")
),
"M/Z tolerance threshold for filtering in ppm. Default is '400'."
),value = 400
),
textInput(
inputId = ns("fpa_threads"),
label = tooltip(
trigger = list(
"threads",
bsicons::bs_icon("info-circle")
),
"number of threads to use for parallel processing. Default is '3'"
),value = 3
),
radioButtons(
inputId = ns("fpa_include_hidden_metabolites"),
label = tooltip(
trigger = list(
"include_hidden_metabolites",
bsicons::bs_icon("info-circle")
),
"whether to include hidden metabolites. Default is 'FALSE'"
),choices = c("TRUE","FALSE"),value = "FALSE"
)
),
actionButton(inputId = ns('fpa_start'),label = "Perform FPA",icon = icon("play"))
),
page_fluid(
navset_card_tab(
height = 400,
full_screen = T,
title = "Dysregulated metabolic network",
sidebar = accordion(
open = FALSE,
accordion_panel(
title = 'Parameters',
radioButtons(
inputId = ns('fig2_include_feature'), label = tooltip(
trigger = list(
"include_feature",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to include detected metabolic features in the plot. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig2_include_hidden_metabolites'), label = tooltip(
trigger = list(
"include_hidden_metabolites",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to include hidden metabolites in the plot. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig2_add_compound_name'), label = tooltip(
trigger = list(
"add_compound_name",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to add compound names as labels in the visualization. Default is 'TRUE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig2_node_color_by_module'), label = tooltip(
trigger = list(
"node_color_by_module",
bsicons::bs_icon("info-circle")
),
"Add pathways beside of the network or not. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
textInput(
inputId = ns('fig2_layout'),label = tooltip(
trigger = list(
"layout",
bsicons::bs_icon("info-circle")
),
"The layout of the network, such as 'kk' or 'fr'."
),value = "fr"
),
actionButton(inputId = ns("show_network_plot"),label = "Show network")
),
accordion_panel(
title = 'Download',
icon = bs_icon('download'),
textInput(
inputId = ns("fig2_height"),label = "Height",value = 7
),
textInput(
inputId = ns("fig2_width"),label = "width",value = 7
),
selectInput(
inputId = ns("fig2_format"),label = "format",
choices = c("jpg","pdf","png","tiff"),
selected = "pdf",selectize = F
),
downloadButton(outputId = ns("fig2_download"),label = "Download",icon = icon("download"))
)
),
nav_panel("Dysregulated metabolic network",
dataTableOutput(ns("network_tbl")),
plotOutput(ns("network_plt"))
)
),
navset_card_tab(
height = 400,
full_screen = T,
title = "Module network",
sidebar = accordion(
open = FALSE,
accordion_panel(
title = 'Parameters',
radioButtons(
inputId = ns('fig1_include_feature'), label = tooltip(
trigger = list(
"include_feature",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to include detected metabolic features in the plot. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig1_include_hidden_metabolites'), label = tooltip(
trigger = list(
"include_hidden_metabolites",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to include hidden metabolites in the plot. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig1_add_compound_name'), label = tooltip(
trigger = list(
"add_compound_name",
bsicons::bs_icon("info-circle")
),
"Logical. Whether to add compound names as labels in the visualization. Default is 'TRUE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
radioButtons(
inputId = ns('fig1_add_pathways'), label = tooltip(
trigger = list(
"add_pathways",
bsicons::bs_icon("info-circle")
),
"Add pathways beside of the network or not. Default is 'FALSE'."
), choices = c("TRUE", "FALSE"),selected = 'FALSE'
),
textInput(
inputId = ns('fig1_layout'),label = tooltip(
trigger = list(
"layout",
bsicons::bs_icon("info-circle")
),
"The layout of the network, such as 'kk' or 'fr'."
),value = "fr"
)
),
accordion_panel(
title = 'Download',
icon = bs_icon('download'),
textInput(
inputId = ns("fig1_height"),label = "Height",value = 7
),
textInput(
inputId = ns("fig1_width"),label = "width",value = 7
),
selectInput(
inputId = ns("fig1_format"),label = "format",
choices = c("jpg","pdf","png","tiff"),
selected = "pdf",selectize = F
),
downloadButton(outputId = ns("fig1_download"),label = "Download",icon = icon("download"))
)
),
nav_panel("Module network",
actionButton(inputId = ns("show_module_plot"),label = "Show module network"),
dataTableOutput(ns("module_tbl")),
plotOutput(ns("module_plt"))
)
)
)
)
)
}
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
devtools::document()
devtools::document()
run_tidymass_shiny()
load("~/temp_file/fpa/fpa_result.rda")
fpa_result <- load("~/temp_file/fpa/fpa_result.rda")
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
library(tidymass)
library(tidymass)
library(tidyverse)
library(tidymassshiny)
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
?tidymassshiny::paramounter_part1
??tidymassshiny::paramounter_part1
library(tidymassshiny)
devtools::document()
run_tidymass_shiny()
library(tidyverse)
library(tidymass)
run_tidymass_shiny()
library(tidyverse)
library(tidymass)
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
library(tidyverse)
library(tidymass)
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
library(tidyverse)
library(tidymass)
library(tidymassshiny)
run_tidymass_shiny()
devtools::document()
check_mass_dataset_class
library(tidymass)
library(tidyverse)
object
load("/Volumes/HubDisk/SynologyDrive/demo_data/01.From_Raw_data/mass_dataset/object_neg_raw.rda")
massdataset::check_mass_dataset_class(object = object_neg_raw)
if(!massdataset::check_mass_dataset_class(object = object_neg_raw)) {return()}
if(!massdataset::check_mass_dataset_class(object = object_neg_raw)) {return();print("wrong input object")}
if(!massdataset::check_mass_dataset_class(object = dadf)) {return();print("wrong input object")}
dadf = "c"
if(!massdataset::check_mass_dataset_class(object = dadf)) {return();print("wrong input object")}
if(!massdataset::check_mass_dataset_class(object = dadf))
if(!massdataset::check_mass_dataset_class(object = dadf)) {return();print("wrong input object")}
check_mass_dataset_class(dadf)
check_mass_dataset_class
class(object_neg_raw)
if(class(object_neg_raw) != "mass_dataset") {return();print("wrong input object")}
object = c(1,2,3)
if(class(object) != "mass_dataset") {return();print("wrong input object")}
if(class(object) != "mass_dataset") {return(NULL);print("wrong input object")}
if(class(object) != "mass_dataset") {break;print("wrong input object")}
if(class(object) != "mass_dataset") {exit;print("wrong input object")}
if (!inherits(object, "mass_dataset")) {
stop("Input object must be a 'mass_dataset' class object.\n",
"Please check the class of your input with class(object).")
return(invisible())  # 双重保障确保终止
}
devtools::document()
run_tidymass_shiny()
run_tidymass_shiny()
