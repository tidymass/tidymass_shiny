))
}
temp_keys = temp_sample_info %>% pull(key) %>% unique()
temp_keys
object <-
object %>%
activate_mass_dataset("sample_info") %>%
left_join(temp_sample_info %>% select(sample_id,key),by = "sample_id")
temp_keys
object <-
object %>%
activate_mass_dataset("sample_info") %>%
left_join(temp_sample_info %>% select(sample_id,key),by = "sample_id")
conflicted::conflict_prefer_all('dplyr')
object <-
object %>%
activate_mass_dataset("sample_info") %>%
left_join(temp_sample_info %>% select(sample_id,key),by = "sample_id")
object
object@sample_info
1:length(temp_keys)
i = 3
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
if(i == 1) {
object_mv <-
object %>%
mutate_variable_na_freq(according_to_samples = temp_id)
object_mv =
object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq)
} else {
object_mv <-
object_mv %>%
mutate_variable_na_freq(according_to_samples = temp_id)
colnames_vari = object_mv %>% extract_variable_info() %>% colnames()
if('ions'%in%colnames_vari) {
object_mv =
object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(across(.cols = i+4,.fns = ~ . <= S_na_freq))
} else {
object_mv =
object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(across(.cols = i+3,.fns = ~ . <= S_na_freq))
}
}
#> na_freq
for (i in 1:length(temp_keys)) {
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
if(i == 1) {
object_mv <-
object %>%
mutate_variable_na_freq(according_to_samples = temp_id)
object_mv =
object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq)
} else {
object_mv <-
object_mv %>%
mutate_variable_na_freq(according_to_samples = temp_id)
colnames_vari = object_mv %>% extract_variable_info() %>% colnames()
if('ions'%in%colnames_vari) {
object_mv =
object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(across(.cols = i+4,.fns = ~ . <= S_na_freq))
} else {
object_mv =
object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(across(.cols = i+3,.fns = ~ . <= S_na_freq))
}
}
}
object_mv
temp_id
if(tag == "class") {
temp_sample_info = object %>%
extract_sample_info() %>%
mutate(key = class)
} else {
temp_sample_info = object %>%
extract_sample_info() %>%
dplyr::rename("tag" = tag) %>%
dplyr::rename("xx" = "class") %>%
dplyr::mutate(key = case_when(
xx == "QC" ~ "QC",
TRUE ~ tag
))
}
temp_keys = temp_sample_info %>% pull(key) %>% unique()
object <-
object %>%
activate_mass_dataset("sample_info") %>%
left_join(temp_sample_info %>% select(sample_id,key),by = "sample_id")
object
for (i in 1:length(temp_keys)) {
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
if (i == 1) {
object_mv <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id) %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq)
} else {
object_mv <- object_mv %>%
mutate_variable_na_freq(according_to_samples = temp_id)
colnames_vari = object_mv %>%
extract_variable_info() %>%
colnames()
# 动态选择并过滤 na_freq.x 列
na_freq_cols = colnames_vari[grep("na_freq", colnames_vari)]
na_freq_filter = purrr::map_lgl(na_freq_cols, ~ object_mv %>% pull(.x) <= S_na_freq)
if ('ions' %in% colnames_vari) {
object_mv = object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & (na_freq_filter %>% any()))
} else {
object_mv = object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & (na_freq_filter %>% any()))
}
}
}
temp_keys
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
if (i == 1) {
object_mv <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id) %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq)
} else {
object_mv <- object_mv %>%
mutate_variable_na_freq(according_to_samples = temp_id)
colnames_vari = object_mv %>%
extract_variable_info() %>%
colnames()
# 动态选择并过滤 na_freq.x 列
na_freq_cols = colnames_vari[grep("na_freq", colnames_vari)]
na_freq_filter = purrr::map_lgl(na_freq_cols, ~ object_mv %>% pull(.x) <= S_na_freq)
if ('ions' %in% colnames_vari) {
object_mv = object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & (na_freq_filter %>% any()))
} else {
object_mv = object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & (na_freq_filter %>% any()))
}
}
temp_id
object_mv <- object_mv %>%
mutate_variable_na_freq(according_to_samples = temp_id)
object_mv
colnames_vari = object_mv %>%
extract_variable_info() %>%
colnames()
colnames_vari
# 动态选择并过滤 na_freq.x 列
na_freq_cols = colnames_vari[grep("na_freq", colnames_vari)]
na_freq_cols
na_freq_filter = purrr::map_lgl(na_freq_cols, ~ object_mv %>% pull(.x) <= S_na_freq)
na_freq_cols
object_mv
na_freq_filter = purrr::map_lgl(na_freq_cols, ~ object_mv %>% extract_variable_info() %>% pull(.x) <= S_na_freq)
object_mv
object_mv %>% pull(na_freq)
na_freq_filter = purrr::map_lgl(na_freq_cols, ~ object_mv  %>% pull(.x) <= S_na_freq)
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
temp_id
colnames_vari = object_mv %>%
extract_variable_info() %>%
colnames()
# 获取所有 na_freq.x 列
na_freq_cols = colnames_vari[grep("na_freq", colnames_vari)]
na_freq_cols
# 创建逻辑表达式，检查每一列是否满足小于 S_na_freq
na_freq_filter = purrr::map(na_freq_cols, ~ object_mv %>% pull(.x) <= S_na_freq)
na_freq_filter
# 合并每列的逻辑结果，检查至少有一个列满足条件
na_freq_check = purrr::reduce(na_freq_filter, `|`)  # 将所有列的结果按逻辑 OR 合并
na_freq_check
# 合并每列的逻辑结果，检查至少有一个列满足条件
na_freq_check = purrr::reduce(na_freq_filter, `|`)  # 将所有列的结果按逻辑 OR 合并
na_freq_check
object_mv = object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & na_freq_check)
object_mv
#> na_freq
for (i in 1:length(temp_keys)) {
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
if (i == 1) {
object_mv <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id) %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq)
} else {
object_mv <- object_mv %>%
mutate_variable_na_freq(according_to_samples = temp_id)
colnames_vari = object_mv %>%
extract_variable_info() %>%
colnames()
# 获取所有 na_freq.x 列
na_freq_cols = colnames_vari[grep("na_freq", colnames_vari)]
# 创建逻辑表达式，检查每一列是否满足小于 S_na_freq
na_freq_filter = purrr::map(na_freq_cols, ~ object_mv %>% pull(.x) <= S_na_freq)
# 合并每列的逻辑结果，检查至少有一个列满足条件
na_freq_check = purrr::reduce(na_freq_filter, `|`)  # 将所有列的结果按逻辑 OR 合并
object_mv = object_mv %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & na_freq_check)
}
}
vari_ori <- object %>% extract_variable_info()
vari_ori
vari_ori <- object_mv %>% extract_variable_info()
vari_ori
vari_ori <- object %>% extract_variable_info()
vari_filter <- object_mv %>% extract_variable_info()
vari_noisy = anti_join(vari_ori,vari_filter)
vari_noisy
load("/Volumes/TerraMas_A/SynologyDrive/5_测试代码/00.DemoHeter/Result/POS/Objects/step1/object_pos_raw.rda")
library(tidymass)
library(tidyverse)
library(tidymassshiny)
if(tag == "class") {
temp_sample_info = object %>%
extract_sample_info() %>%
mutate(key = class)
} else {
temp_sample_info = object %>%
extract_sample_info() %>%
dplyr::rename("tag" = tag) %>%
dplyr::rename("xx" = "class") %>%
dplyr::mutate(key = case_when(
xx == "QC" ~ "QC",
TRUE ~ tag
))
}
temp_keys = temp_sample_info %>% pull(key) %>% unique()
object <-
object %>%
activate_mass_dataset("sample_info") %>%
left_join(temp_sample_info %>% select(sample_id,key),by = "sample_id")
object
temp_sample_info
object <-
object %>%
activate_mass_dataset("sample_info") %>%
left_join(temp_sample_info %>% select(sample_id,key),by = "sample_id")
#> na_freq
for (i in 1:length(temp_keys)) {
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
if (i == 1) {
object <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id) %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq)
} else {
object <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id)
colnames_vari = object %>%
extract_variable_info() %>%
colnames()
# 获取所有 na_freq.x 列
na_freq_cols = colnames_vari[grep("na_freq", colnames_vari)]
# 创建逻辑表达式，检查每一列是否满足小于 S_na_freq
na_freq_filter = purrr::map(na_freq_cols, ~ object %>% pull(.x) <= S_na_freq)
# 合并每列的逻辑结果，检查至少有一个列满足条件
na_freq_check = purrr::reduce(na_freq_filter, `|`)  # 将所有列的结果按逻辑 OR 合并
object_mv = object %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & na_freq_check)
}
}
vari_ori <- object %>% extract_variable_info()
vari_filter <- object_mv %>% extract_variable_info()
vari_noisy = anti_join(vari_ori ,vari_filter )
vari_noisy
vari_noisy = anti_join(vari_ori ,vari_filter, by = "varaiable_id")
vari_ori
vari_noisy = anti_join(vari_ori ,vari_filter, by = "variable_id")
vari_noisy
nrow(vari_ori)
nrow(vari_filter)
load("/Volumes/TerraMas_A/SynologyDrive/5_测试代码/00.DemoHeter/Result/POS/Objects/step1/object_pos_raw.rda")
library(tidymass)
library(tidyverse)
library(tidymassshiny)
tag = 'group'
qc_na_freq = 0.2
S_na_freq = 0.5
if(tag == "class") {
temp_sample_info = object %>%
extract_sample_info() %>%
mutate(key = class)
} else {
temp_sample_info = object %>%
extract_sample_info() %>%
dplyr::rename("tag" = tag) %>%
dplyr::rename("xx" = "class") %>%
dplyr::mutate(key = case_when(
xx == "QC" ~ "QC",
TRUE ~ tag
))
}
object <- object_pos_raw
if(tag == "class") {
temp_sample_info = object %>%
extract_sample_info() %>%
mutate(key = class)
} else {
temp_sample_info = object %>%
extract_sample_info() %>%
dplyr::rename("tag" = tag) %>%
dplyr::rename("xx" = "class") %>%
dplyr::mutate(key = case_when(
xx == "QC" ~ "QC",
TRUE ~ tag
))
}
temp_keys = temp_sample_info %>% pull(key) %>% unique()
object <-
object %>%
activate_mass_dataset("sample_info") %>%
left_join(temp_sample_info %>% select(sample_id,key),by = "sample_id")
#> na_freq
for (i in 1:length(temp_keys)) {
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
if (i == 1) {
object <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id) %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq)
} else {
object <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id)
colnames_vari = object %>%
extract_variable_info() %>%
colnames()
# 获取所有 na_freq.x 列
na_freq_cols = colnames_vari[grep("na_freq", colnames_vari)]
# 创建逻辑表达式，检查每一列是否满足小于 S_na_freq
na_freq_filter = purrr::map(na_freq_cols, ~ object %>% pull(.x) <= S_na_freq)
# 合并每列的逻辑结果，检查至少有一个列满足条件
na_freq_check = purrr::reduce(na_freq_filter, `|`)  # 将所有列的结果按逻辑 OR 合并
object_mv = object %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & na_freq_check)
}
}
vari_ori <- object %>% extract_variable_info()
vari_filter <- object_mv %>% extract_variable_info()
object = object_pos_raw
if(tag == "class") {
temp_sample_info = object %>%
extract_sample_info() %>%
mutate(key = class)
} else {
temp_sample_info = object %>%
extract_sample_info() %>%
dplyr::rename("tag" = tag) %>%
dplyr::rename("xx" = "class") %>%
dplyr::mutate(key = case_when(
xx == "QC" ~ "QC",
TRUE ~ tag
))
}
temp_keys = temp_sample_info %>% pull(key) %>% unique()
object <-
object %>%
activate_mass_dataset("sample_info") %>%
left_join(temp_sample_info %>% select(sample_id,key),by = "sample_id")
#> na_freq
for (i in 1:length(temp_keys)) {
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
if (i == 1) {
object <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id) %>%
activate_mass_dataset(what = "variable_info")
} else {
object <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id)
colnames_vari = object %>%
extract_variable_info() %>%
colnames()
# 获取所有 na_freq.x 列
na_freq_cols = colnames_vari[grep("na_freq", colnames_vari)]
# 创建逻辑表达式，检查每一列是否满足小于 S_na_freq
na_freq_filter = purrr::map(na_freq_cols, ~ object %>% pull(.x) <= S_na_freq)
# 合并每列的逻辑结果，检查至少有一个列满足条件
na_freq_check = purrr::reduce(na_freq_filter, `|`)  # 将所有列的结果按逻辑 OR 合并
object_mv = object %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & na_freq_check)
}
}
vari_ori <- object %>% extract_variable_info()
vari_filter <- object_mv %>% extract_variable_info()
vari_noisy = anti_join(vari_ori ,vari_filter, by = "variable_id")
vari_noisy
#' @param S_na_freq missing value ratio of tag groups
#' @importFrom massdataset extract_sample_info activate_mass_dataset mutate_variable_na_freq extract_variable_info
#' @importFrom magrittr %>%
#' @importFrom dplyr rename mutate case_when filter across left_join anti_join pull
#' @importFrom purrr map reduce
#' @references based on  massdataset::mutate_variable_na_freq
#'
#' @noRd
#' @export
#'
find_noise = function(object,tag = "class",qc_na_freq = 0.2,S_na_freq = 0.5) {
if(tag == "class") {
temp_sample_info = object %>%
extract_sample_info() %>%
mutate(key = class)
} else {
temp_sample_info = object %>%
extract_sample_info() %>%
dplyr::rename("tag" = tag) %>%
dplyr::rename("xx" = "class") %>%
dplyr::mutate(key = case_when(
xx == "QC" ~ "QC",
TRUE ~ tag
))
}
temp_keys = temp_sample_info %>% pull(key) %>% unique()
object <-
object %>%
activate_mass_dataset("sample_info") %>%
left_join(temp_sample_info %>% select(sample_id,key),by = "sample_id")
#> na_freq
for (i in 1:length(temp_keys)) {
temp_id = object %>%
activate_mass_dataset(what = "sample_info") %>%
filter(key == temp_keys[i]) %>%
pull(sample_id)
if (i == 1) {
object <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id) %>%
activate_mass_dataset(what = "variable_info")
} else {
object <- object %>%
mutate_variable_na_freq(according_to_samples = temp_id)
colnames_vari = object %>%
extract_variable_info() %>%
colnames()
na_freq_cols = colnames_vari[grep("na_freq", colnames_vari)]
na_freq_filter = purrr::map(na_freq_cols, ~ object %>% pull(.x) <= S_na_freq)
na_freq_check = purrr::reduce(na_freq_filter, `|`)
object_mv = object %>%
activate_mass_dataset(what = "variable_info") %>%
filter(na_freq <= qc_na_freq & na_freq_check)
}
}
vari_ori <- object %>% extract_variable_info()
vari_filter <- object_mv %>% extract_variable_info()
vari_noisy = anti_join(vari_ori ,vari_filter, by = "variable_id")
out = list(
noisy_tbl = vari_noisy,
object_mv = object_mv
)
return(out)
}
run_tidymass_shiny()
run_tidymass_shiny()
devtools::document()
library(tidymassshiny)
library(tidymass)
library(tidyverse)
library(tidymassshiny)
run_tidymass_shiny(\)
run_tidymass_shiny()
devtools::document()
library(tidymassshiny)
library(tidymassshiny)
run_tidymass_shiny()
library(tidymass)
library(tidyverse)
library(tidymassshiny)
run_tidymass_shiny()
library(tidyverse)
